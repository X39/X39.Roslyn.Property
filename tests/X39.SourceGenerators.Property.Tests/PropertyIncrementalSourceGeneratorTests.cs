using System;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace X39.SourceGenerators.Property.Tests;

public class PropertyIncrementalSourceGeneratorTests
{
    private const string NullableHandlingCode = """
                                                #nullable enable
                                                using X39.SourceGenerators.Property;
                                                namespace TestNamespace;

                                                [GenerateProperties]
                                                public partial class NullableHandling
                                                {
                                                    private string _notNullable;
                                                    private string? _nullable;
                                                }
                                                """;

    private const string NullableHandlingExpected = """
                                                    // <auto-generated/>
                                                    #nullable enable
                                                    using System;
                                                    using System.Collections.Generic;
                                                    using X39.SourceGenerators.Property;

                                                    namespace TestNamespace;
                                                    partial class NullableHandling
                                                    {
                                                        public string NotNullable
                                                        {
                                                            get => _notNullable;
                                                            set
                                                            {
                                                                if (value.Equals(_notNullable)) return;
                                                                _notNullable = value;
                                                            }
                                                        }
                                                        public string? Nullable
                                                        {
                                                            get => _nullable;
                                                            set
                                                            {
                                                                if (value is null && _nullable is null || (value?.Equals(_nullable) ?? false)) return;
                                                                _nullable = value;
                                                            }
                                                        }
                                                    }

                                                    """;

    private const string NullableDisabledCode = """
                                                #nullable disable
                                                using X39.SourceGenerators.Property;
                                                namespace TestNamespace;

                                                [GenerateProperties]
                                                public partial class NullableDisabled
                                                {
                                                    private string _nullable;
                                                }
                                                """;

    private const string NullableDisabledExpected = """
                                                    // <auto-generated/>
                                                    #nullable enable
                                                    using System;
                                                    using System.Collections.Generic;
                                                    using X39.SourceGenerators.Property;

                                                    namespace TestNamespace;
                                                    partial class NullableDisabled
                                                    {
                                                        public string? Nullable
                                                        {
                                                            get => _nullable;
                                                            set
                                                            {
                                                                if (value is null && _nullable is null || (value?.Equals(_nullable) ?? false)) return;
                                                                _nullable = value;
                                                            }
                                                        }
                                                    }

                                                    """;

    private const string GeneratePropertiesOnClassCode = """
                                                         using X39.SourceGenerators.Property;
                                                         namespace TestNamespace;

                                                         [GenerateProperties]
                                                         public partial class GeneratePropertiesOnClass
                                                         {
                                                             private float _field;
                                                         }
                                                         """;

    private const string GeneratePropertiesOnClassExpected = """
                                                             // <auto-generated/>
                                                             #nullable enable
                                                             using System;
                                                             using System.Collections.Generic;
                                                             using X39.SourceGenerators.Property;

                                                             namespace TestNamespace;
                                                             partial class GeneratePropertiesOnClass
                                                             {
                                                                 public float Field
                                                                 {
                                                                     get => _field;
                                                                     set
                                                                     {
                                                                         if (value.Equals(_field)) return;
                                                                         _field = value;
                                                                     }
                                                                 }
                                                             }

                                                             """;

    private const string DocumentationTakeoverCode = """
                                                     using X39.SourceGenerators.Property;
                                                     namespace TestNamespace;

                                                     [GenerateProperties]
                                                     public partial class DocumentationTakeover
                                                     {
                                                         /// <summary>
                                                         /// This is a documentation comment.
                                                         /// </summary>
                                                         private float _field;
                                                     }
                                                     """;

    private const string DocumentationTakeoverExpected = """
                                                         // <auto-generated/>
                                                         #nullable enable
                                                         using System;
                                                         using System.Collections.Generic;
                                                         using X39.SourceGenerators.Property;

                                                         namespace TestNamespace;
                                                         partial class DocumentationTakeover
                                                         {
                                                             /// <summary>
                                                             /// This is a documentation comment.
                                                             /// </summary>
                                                             public float Field
                                                             {
                                                                 get => _field;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_field)) return;
                                                                     _field = value;
                                                                 }
                                                             }
                                                         }

                                                         """;

    private const string SetterModeNoReadOnlyDefaultCode = """
                                                           using X39.SourceGenerators.Property;
                                                           namespace TestNamespace;

                                                           [GenerateProperties]
                                                           public partial class SetterModeNoReadOnlyDefault
                                                           {
                                                               [Setter(ESetterMode.Default)]
                                                               private float _field;
                                                           }
                                                           """;

    private const string SetterModeNoReadOnlyDefaultExpected = """
                                                               // <auto-generated/>
                                                               #nullable enable
                                                               using System;
                                                               using System.Collections.Generic;
                                                               using X39.SourceGenerators.Property;

                                                               namespace TestNamespace;
                                                               partial class SetterModeNoReadOnlyDefault
                                                               {
                                                                   public float Field
                                                                   {
                                                                       get => _field;
                                                                       set
                                                                       {
                                                                           if (value.Equals(_field)) return;
                                                                           _field = value;
                                                                       }
                                                                   }
                                                               }

                                                               """;

    private const string SetterModeReadOnlyDefaultCode = """
                                                         using X39.SourceGenerators.Property;
                                                         namespace TestNamespace;

                                                         [GenerateProperties]
                                                         public partial class SetterModeReadOnlyDefault
                                                         {
                                                             [Setter(ESetterMode.Default)]
                                                             private readonly float _field;
                                                         }
                                                         """;

    private const string SetterModeReadOnlyDefaultExpected = """
                                                             // <auto-generated/>
                                                             #nullable enable
                                                             using System;
                                                             using System.Collections.Generic;
                                                             using X39.SourceGenerators.Property;

                                                             namespace TestNamespace;
                                                             partial class SetterModeReadOnlyDefault
                                                             {
                                                                 public float Field
                                                                 {
                                                                     get => _field;
                                                                     init
                                                                     {
                                                                         _field = value;
                                                                     }
                                                                 }
                                                             }

                                                             """;

    private const string SetterModeReadOnlySetCode = """
                                                     using X39.SourceGenerators.Property;
                                                     namespace TestNamespace;

                                                     [GenerateProperties]
                                                     public partial class SetterModeReadOnlySet
                                                     {
                                                         [Setter(ESetterMode.Set)]
                                                         private readonly float _field;
                                                     }
                                                     """;

    private const string SetterModeReadOnlySetExpected = """
                                                         // <auto-generated/>
                                                         #nullable enable
                                                         using System;
                                                         using System.Collections.Generic;
                                                         using X39.SourceGenerators.Property;

                                                         namespace TestNamespace;
                                                         partial class SetterModeReadOnlySet
                                                         {
                                                             public float Field
                                                             {
                                                                 get => _field;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_field)) return;
                                                                     _field = value;
                                                                 }
                                                             }
                                                         }

                                                         """;

    private const string SetterModeNoReadOnlyInitCode = """
                                                        using X39.SourceGenerators.Property;
                                                        namespace TestNamespace;

                                                        [GenerateProperties]
                                                        public partial class SetterModeNoReadOnlyInit
                                                        {
                                                            [Setter(ESetterMode.Init)]
                                                            private float _field;
                                                        }
                                                        """;

    private const string SetterModeNoReadOnlyInitExpected = """
                                                            // <auto-generated/>
                                                            #nullable enable
                                                            using System;
                                                            using System.Collections.Generic;
                                                            using X39.SourceGenerators.Property;

                                                            namespace TestNamespace;
                                                            partial class SetterModeNoReadOnlyInit
                                                            {
                                                                public float Field
                                                                {
                                                                    get => _field;
                                                                    init
                                                                    {
                                                                        _field = value;
                                                                    }
                                                                }
                                                            }

                                                            """;

    private const string SetterModeNoneCode = """
                                              using X39.SourceGenerators.Property;
                                              namespace TestNamespace;

                                              [GenerateProperties]
                                              public partial class SetterModeNone
                                              {
                                                  [Setter(ESetterMode.None)]
                                                  private float _field;
                                              }
                                              """;

    private const string SetterModeNoneExpected = """
                                                  // <auto-generated/>
                                                  #nullable enable
                                                  using System;
                                                  using System.Collections.Generic;
                                                  using X39.SourceGenerators.Property;

                                                  namespace TestNamespace;
                                                  partial class SetterModeNone
                                                  {
                                                      public float Field
                                                      {
                                                          get => _field;
                                                      }
                                                  }

                                                  """;

    private const string GetterModeDefaultCode = """
                                                 using X39.SourceGenerators.Property;
                                                 namespace TestNamespace;

                                                 [GenerateProperties]
                                                 public partial class GetterModeDefault
                                                 {
                                                     [Getter(EGetterMode.Default)]
                                                     private float _field;
                                                 }
                                                 """;

    private const string GetterModeDefaultExpected = """
                                                     // <auto-generated/>
                                                     #nullable enable
                                                     using System;
                                                     using System.Collections.Generic;
                                                     using X39.SourceGenerators.Property;

                                                     namespace TestNamespace;
                                                     partial class GetterModeDefault
                                                     {
                                                         public float Field
                                                         {
                                                             get => _field;
                                                             set
                                                             {
                                                                 if (value.Equals(_field)) return;
                                                                 _field = value;
                                                             }
                                                         }
                                                     }

                                                     """;

    private const string GetterModeNoneCode = """
                                              using X39.SourceGenerators.Property;
                                              namespace TestNamespace;

                                              [GenerateProperties]
                                              public partial class GetterModeNone
                                              {
                                                  [Getter(EGetterMode.None)]
                                                  private float _field;
                                              }
                                              """;

    private const string GetterModeNoneExpected = """
                                                  // <auto-generated/>
                                                  #nullable enable
                                                  using System;
                                                  using System.Collections.Generic;
                                                  using X39.SourceGenerators.Property;

                                                  namespace TestNamespace;
                                                  partial class GetterModeNone
                                                  {
                                                      public float Field
                                                      {
                                                          set
                                                          {
                                                              if (value.Equals(_field)) return;
                                                              _field = value;
                                                          }
                                                      }
                                                  }

                                                  """;

    private const string PropertiesBackingFieldIsLeftUnaffectedCode = """
                                                                      using X39.SourceGenerators.Property;
                                                                      namespace TestNamespace;

                                                                      [GenerateProperties]
                                                                      public partial class PropertiesBackingFieldIsLeftUnaffected
                                                                      {
                                                                          private float _field;
                                                                          
                                                                          public bool Test { get; set; }
                                                                      }
                                                                      """;

    private const string PropertiesBackingFieldIsLeftUnaffectedExpected = """
                                                                          // <auto-generated/>
                                                                          #nullable enable
                                                                          using System;
                                                                          using System.Collections.Generic;
                                                                          using X39.SourceGenerators.Property;

                                                                          namespace TestNamespace;
                                                                          partial class PropertiesBackingFieldIsLeftUnaffected
                                                                          {
                                                                              public float Field
                                                                              {
                                                                                  get => _field;
                                                                                  set
                                                                                  {
                                                                                      if (value.Equals(_field)) return;
                                                                                      _field = value;
                                                                                  }
                                                                              }
                                                                          }

                                                                          """;

    private const string GeneratePropertiesOnFieldCode = """
                                                         using X39.SourceGenerators.Property;
                                                         namespace TestNamespace;

                                                         public partial class GeneratePropertiesOnField
                                                         {
                                                             [GenerateProperties]
                                                             private float _field;
                                                         }
                                                         """;

    private const string GeneratePropertiesOnFieldExpected = """
                                                             // <auto-generated/>
                                                             #nullable enable
                                                             using System;
                                                             using System.Collections.Generic;
                                                             using X39.SourceGenerators.Property;

                                                             namespace TestNamespace;
                                                             partial class GeneratePropertiesOnField
                                                             {
                                                                 public float Field
                                                                 {
                                                                     get => _field;
                                                                     set
                                                                     {
                                                                         if (value.Equals(_field)) return;
                                                                         _field = value;
                                                                     }
                                                                 }
                                                             }

                                                             """;

    private const string NotifyOnCode = """
                                        using X39.SourceGenerators.Property;
                                        namespace TestNamespace;

                                        [NotifyPropertyChanging(true)]
                                        [NotifyPropertyChanged(true)]
                                        public partial class NotifyOn
                                        {
                                            private float _field;
                                            [NotifyOn(nameof(Field))]
                                            public float Indicection => _field;
                                        }
                                        """;

    private const string NotifyOnExpected = """
                                            // <auto-generated/>
                                            #nullable enable
                                            using System;
                                            using System.Collections.Generic;
                                            using X39.SourceGenerators.Property;

                                            namespace TestNamespace;
                                            partial class NotifyOn
                                             : System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging
                                            {
                                                public event System.ComponentModel.PropertyChangingEventHandler? PropertyChanging;
                                                public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
                                                public float Field
                                                {
                                                    get => _field;
                                                    set
                                                    {
                                                        if (value.Equals(_field)) return;
                                                        this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Field"));
                                                        this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Indicection"));
                                                        _field = value;
                                                        this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                                                        this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Indicection"));
                                                    }
                                                }
                                            }

                                            """;

    private const string NotifyPropertyChangingOnAllWithGenerationCode = """
                                                                         using X39.SourceGenerators.Property;
                                                                         namespace TestNamespace;

                                                                         [NotifyPropertyChanging(true)]
                                                                         public partial class NotifyPropertyChangingOnAllWithGeneration
                                                                         {
                                                                             private float _field;
                                                                         }
                                                                         """;

    private const string NotifyPropertyChangingOnAllWithGenerationExpected = """
                                                                             // <auto-generated/>
                                                                             #nullable enable
                                                                             using System;
                                                                             using System.Collections.Generic;
                                                                             using X39.SourceGenerators.Property;

                                                                             namespace TestNamespace;
                                                                             partial class NotifyPropertyChangingOnAllWithGeneration
                                                                              : System.ComponentModel.INotifyPropertyChanging
                                                                             {
                                                                                 public event System.ComponentModel.PropertyChangingEventHandler? PropertyChanging;
                                                                                 public float Field
                                                                                 {
                                                                                     get => _field;
                                                                                     set
                                                                                     {
                                                                                         if (value.Equals(_field)) return;
                                                                                         this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Field"));
                                                                                         _field = value;
                                                                                     }
                                                                                 }
                                                                             }

                                                                             """;

    private const string NotifyPropertyChangingOnAllDefaultGenerationCode = """
                                                                            using X39.SourceGenerators.Property;
                                                                            namespace TestNamespace;

                                                                            [NotifyPropertyChanging]
                                                                            public partial class NotifyPropertyChangingOnAllDefaultGeneration
                                                                            {
                                                                                private float _field;
                                                                            }
                                                                            """;

    private const string NotifyPropertyChangingOnAllDefaultGenerationExpected = """
        // <auto-generated/>
        #nullable enable
        using System;
        using System.Collections.Generic;
        using X39.SourceGenerators.Property;

        namespace TestNamespace;
        partial class NotifyPropertyChangingOnAllDefaultGeneration
         : System.ComponentModel.INotifyPropertyChanging
        {
            public event System.ComponentModel.PropertyChangingEventHandler? PropertyChanging;
            public float Field
            {
                get => _field;
                set
                {
                    if (value.Equals(_field)) return;
                    this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Field"));
                    _field = value;
                }
            }
        }

        """;

    private const string NotifyPropertyChangingOnAllNoGenerationCode = """
                                                                       using X39.SourceGenerators.Property;
                                                                       namespace TestNamespace;

                                                                       [NotifyPropertyChanging(false)]
                                                                       public partial class NotifyPropertyChangingOnAllNoGeneration
                                                                       : System.ComponentModel.INotifyPropertyChanging
                                                                       {
                                                                           public event System.ComponentModel.PropertyChangingEventHandler? PropertyChanging;
                                                                           private float _field;
                                                                       }
                                                                       """;

    private const string NotifyPropertyChangingOnAllNoGenerationExpected = """
                                                                           // <auto-generated/>
                                                                           #nullable enable
                                                                           using System;
                                                                           using System.Collections.Generic;
                                                                           using X39.SourceGenerators.Property;

                                                                           namespace TestNamespace;
                                                                           partial class NotifyPropertyChangingOnAllNoGeneration
                                                                           {
                                                                               public float Field
                                                                               {
                                                                                   get => _field;
                                                                                   set
                                                                                   {
                                                                                       if (value.Equals(_field)) return;
                                                                                       this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Field"));
                                                                                       _field = value;
                                                                                   }
                                                                               }
                                                                           }

                                                                           """;

    private const string NotifyPropertyChangedOnAllWithGenerationCode = """
                                                                        using X39.SourceGenerators.Property;
                                                                        namespace TestNamespace;

                                                                        [NotifyPropertyChanged(true)]
                                                                        public partial class NotifyPropertyChangedOnAllWithGeneration
                                                                        {
                                                                            private float _field;
                                                                        }
                                                                        """;

    private const string NotifyPropertyChangedOnAllWithGenerationExpected = """
                                                                            // <auto-generated/>
                                                                            #nullable enable
                                                                            using System;
                                                                            using System.Collections.Generic;
                                                                            using X39.SourceGenerators.Property;

                                                                            namespace TestNamespace;
                                                                            partial class NotifyPropertyChangedOnAllWithGeneration
                                                                             : System.ComponentModel.INotifyPropertyChanged
                                                                            {
                                                                                public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
                                                                                public float Field
                                                                                {
                                                                                    get => _field;
                                                                                    set
                                                                                    {
                                                                                        if (value.Equals(_field)) return;
                                                                                        _field = value;
                                                                                        this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                                                                                    }
                                                                                }
                                                                            }

                                                                            """;

    private const string NotifyPropertyChangedOnAllDefaultGenerationCode = """
                                                                           using X39.SourceGenerators.Property;
                                                                           namespace TestNamespace;

                                                                           [NotifyPropertyChanged]
                                                                           public partial class NotifyPropertyChangedOnAllDefaultGeneration
                                                                           {
                                                                               private float _field;
                                                                           }
                                                                           """;

    private const string NotifyPropertyChangedOnAllDefaultGenerationExpected = """
                                                                               // <auto-generated/>
                                                                               #nullable enable
                                                                               using System;
                                                                               using System.Collections.Generic;
                                                                               using X39.SourceGenerators.Property;

                                                                               namespace TestNamespace;
                                                                               partial class NotifyPropertyChangedOnAllDefaultGeneration
                                                                                : System.ComponentModel.INotifyPropertyChanged
                                                                               {
                                                                                   public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
                                                                                   public float Field
                                                                                   {
                                                                                       get => _field;
                                                                                       set
                                                                                       {
                                                                                           if (value.Equals(_field)) return;
                                                                                           _field = value;
                                                                                           this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                                                                                       }
                                                                                   }
                                                                               }

                                                                               """;

    private const string NotifyPropertyChangedOnAllNoGenerationCode = """
                                                                      using X39.SourceGenerators.Property;
                                                                      namespace TestNamespace;

                                                                      [NotifyPropertyChanged(false)]
                                                                      public partial class NotifyPropertyChangedOnAllNoGeneration
                                                                       : System.ComponentModel.INotifyPropertyChanged
                                                                      {
                                                                          public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
                                                                          private float _field;
                                                                      }
                                                                      """;

    private const string NotifyPropertyChangedOnAllNoGenerationExpected = """
                                                                          // <auto-generated/>
                                                                          #nullable enable
                                                                          using System;
                                                                          using System.Collections.Generic;
                                                                          using X39.SourceGenerators.Property;

                                                                          namespace TestNamespace;
                                                                          partial class NotifyPropertyChangedOnAllNoGeneration
                                                                          {
                                                                              public float Field
                                                                              {
                                                                                  get => _field;
                                                                                  set
                                                                                  {
                                                                                      if (value.Equals(_field)) return;
                                                                                      _field = value;
                                                                                      this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                                                                                  }
                                                                              }
                                                                          }

                                                                          """;

    private const string NotifyPropertyChangedOnFieldCode = """
                                                            using X39.SourceGenerators.Property;
                                                            namespace TestNamespace;

                                                            public partial class NotifyPropertyChangedOnField : System.ComponentModel.INotifyPropertyChanged
                                                            {
                                                                public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
                                                                
                                                                [NotifyPropertyChanged]
                                                                private float _field;
                                                            }
                                                            """;

    private const string NotifyPropertyChangedOnFieldExpected = """
                                                                // <auto-generated/>
                                                                #nullable enable
                                                                using System;
                                                                using System.Collections.Generic;
                                                                using X39.SourceGenerators.Property;

                                                                namespace TestNamespace;
                                                                partial class NotifyPropertyChangedOnField
                                                                {
                                                                    public float Field
                                                                    {
                                                                        get => _field;
                                                                        set
                                                                        {
                                                                            if (value.Equals(_field)) return;
                                                                            _field = value;
                                                                            this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                                                                        }
                                                                    }
                                                                }

                                                                """;

    private const string NotifyPropertyChangingOnFieldCode = """
                                                             using X39.SourceGenerators.Property;
                                                             namespace TestNamespace;

                                                             public partial class NotifyPropertyChangingOnField : System.ComponentModel.INotifyPropertyChanging
                                                             {
                                                                 public event System.ComponentModel.PropertyChangingEventHandler? PropertyChanging;
                                                                 
                                                                 [NotifyPropertyChanging]
                                                                 private float _field;
                                                             }
                                                             """;

    private const string NotifyPropertyChangingOnFieldExpected = """
                                                                 // <auto-generated/>
                                                                 #nullable enable
                                                                 using System;
                                                                 using System.Collections.Generic;
                                                                 using X39.SourceGenerators.Property;

                                                                 namespace TestNamespace;
                                                                 partial class NotifyPropertyChangingOnField
                                                                 {
                                                                     public float Field
                                                                     {
                                                                         get => _field;
                                                                         set
                                                                         {
                                                                             if (value.Equals(_field)) return;
                                                                             this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Field"));
                                                                             _field = value;
                                                                         }
                                                                     }
                                                                 }

                                                                 """;

    private const string PropertyNameCode = """
                                            using X39.SourceGenerators.Property;
                                            namespace TestNamespace;

                                            public partial class PropertyName
                                            {
                                                [PropertyName("SomeName")]
                                                private float _field;
                                            }
                                            """;

    private const string PropertyNameExpected = """
                                                // <auto-generated/>
                                                #nullable enable
                                                using System;
                                                using System.Collections.Generic;
                                                using X39.SourceGenerators.Property;

                                                namespace TestNamespace;
                                                partial class PropertyName
                                                {
                                                    public float SomeName
                                                    {
                                                        get => _field;
                                                        set
                                                        {
                                                            if (value.Equals(_field)) return;
                                                            _field = value;
                                                        }
                                                    }
                                                }

                                                """;

    private const string MaxLengthValidationCode = """
                                                   #nullable enable
                                                   using X39.SourceGenerators.Property;
                                                   using System.ComponentModel.DataAnnotations;
                                                   namespace TestNamespace;

                                                   public partial class MaxLengthValidation
                                                   {
                                                       [ValidationStrategy(EValidationStrategy.Exception), MaxLength(123)]
                                                       private string _field;
                                                   }
                                                   """;

    private const string MaxLengthValidationExpected = """
                                                       // <auto-generated/>
                                                       #nullable enable
                                                       using System;
                                                       using System.Collections.Generic;
                                                       using X39.SourceGenerators.Property;
                                                       using System.ComponentModel.DataAnnotations;

                                                       namespace TestNamespace;
                                                       partial class MaxLengthValidation
                                                       {
                                                           [System.ComponentModel.DataAnnotations.MaxLengthAttribute(123)]
                                                           public string Field
                                                           {
                                                               get => _field;
                                                               set
                                                               {
                                                                   if (value.Equals(_field)) return;
                                                                   if (value.Length > 123)
                                                                       throw new System.ArgumentException("Validation of Field failed: Value must be at most 123 characters long", nameof(value));
                                                                   _field = value;
                                                               }
                                                           }
                                                       }

                                                       """;

    private const string IntRangeValidationCode = """
                                                  using X39.SourceGenerators.Property;
                                                  using System.ComponentModel.DataAnnotations;
                                                  namespace TestNamespace;

                                                  public partial class IntRangeValidation
                                                  {
                                                      [ValidationStrategy(EValidationStrategy.Exception), Range(5, 6)]
                                                      private int _field;
                                                  }
                                                  """;

    private const string IntRangeValidationExpected = """
                                                      // <auto-generated/>
                                                      #nullable enable
                                                      using System;
                                                      using System.Collections.Generic;
                                                      using X39.SourceGenerators.Property;
                                                      using System.ComponentModel.DataAnnotations;

                                                      namespace TestNamespace;
                                                      partial class IntRangeValidation
                                                      {
                                                          [System.ComponentModel.DataAnnotations.RangeAttribute(5, 6)]
                                                          public int Field
                                                          {
                                                              get => _field;
                                                              set
                                                              {
                                                                  if (value.Equals(_field)) return;
                                                                  if (value < 5 || value > 6)
                                                                      throw new System.ArgumentException("Validation of Field failed: Value must be between 5 and 6", nameof(value));
                                                                  _field = value;
                                                              }
                                                          }
                                                      }

                                                      """;

    private const string DoubleRangeValidationCode = """
                                                     using X39.SourceGenerators.Property;
                                                     using System.ComponentModel.DataAnnotations;
                                                     namespace TestNamespace;

                                                     public partial class DoubleRangeValidation
                                                     {
                                                         [ValidationStrategy(EValidationStrategy.Exception), Range(5.1, 6.1)]
                                                         private double _field;
                                                     }
                                                     """;

    private const string DoubleRangeValidationExpected = """
                                                         // <auto-generated/>
                                                         #nullable enable
                                                         using System;
                                                         using System.Collections.Generic;
                                                         using X39.SourceGenerators.Property;
                                                         using System.ComponentModel.DataAnnotations;

                                                         namespace TestNamespace;
                                                         partial class DoubleRangeValidation
                                                         {
                                                             [System.ComponentModel.DataAnnotations.RangeAttribute(5.1, 6.1)]
                                                             public double Field
                                                             {
                                                                 get => _field;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_field)) return;
                                                                     if (value < 5.1 || value > 6.1)
                                                                         throw new System.ArgumentException("Validation of Field failed: Value must be between 5.1 and 6.1", nameof(value));
                                                                     _field = value;
                                                                 }
                                                             }
                                                         }

                                                         """;

    private const string ExplicitTypeRangeValidationCode = """
                                                           using X39.SourceGenerators.Property;
                                                           using System.ComponentModel.DataAnnotations;
                                                           namespace TestNamespace;

                                                           public partial class ExplicitTypeRangeValidation
                                                           {
                                                               [ValidationStrategy(EValidationStrategy.Exception), Range(typeof(int), "5", "6")]
                                                               private int _field;
                                                           }
                                                           """;

    private const string ExplicitTypeRangeValidationExpected = """
                                                               // <auto-generated/>
                                                               #nullable enable
                                                               using System;
                                                               using System.Collections.Generic;
                                                               using X39.SourceGenerators.Property;
                                                               using System.ComponentModel.DataAnnotations;

                                                               namespace TestNamespace;
                                                               partial class ExplicitTypeRangeValidation
                                                               {
                                                                   [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(int), "5", "6")]
                                                                   public int Field
                                                                   {
                                                                       get => _field;
                                                                       set
                                                                       {
                                                                           if (value.Equals(_field)) return;
                                                                           if (value.CompareTo(5) < 0 || value.CompareTo(6) > 0)
                                                                               throw new System.ArgumentException("Validation of Field failed: Value must be between 5 and 6", nameof(value));
                                                                           _field = value;
                                                                       }
                                                                   }
                                                               }

                                                               """;

    private const string EqualityCheckDefaultCode = """
                                                    using X39.SourceGenerators.Property;
                                                    using System.ComponentModel.DataAnnotations;
                                                    namespace TestNamespace;

                                                    public partial class EqualityCheckDefault
                                                    {
                                                        [EqualityCheck(EEqualityCheckMode.Default)]
                                                        private int _field;
                                                    }
                                                    """;

    private const string EqualityCheckDefaultExpected = """
                                                        // <auto-generated/>
                                                        #nullable enable
                                                        using System;
                                                        using System.Collections.Generic;
                                                        using X39.SourceGenerators.Property;
                                                        using System.ComponentModel.DataAnnotations;

                                                        namespace TestNamespace;
                                                        partial class EqualityCheckDefault
                                                        {
                                                            public int Field
                                                            {
                                                                get => _field;
                                                                set
                                                                {
                                                                    if (value.Equals(_field)) return;
                                                                    _field = value;
                                                                }
                                                            }
                                                        }

                                                        """;

    private const string EqualityCheckCustomCode = """
                                                   using X39.SourceGenerators.Property;
                                                   using System.ComponentModel.DataAnnotations;
                                                   namespace TestNamespace;

                                                   public partial class EqualityCheckCustom
                                                   {
                                                       private static bool CustomEqualityCheck(int oldValue, int newValue) => false;
                                                       [EqualityCheck(EEqualityCheckMode.Custom, custom: nameof(CustomEqualityCheck))]
                                                       private int _field;
                                                   }
                                                   """;

    private const string EqualityCheckCustomExpected = """
                                                       // <auto-generated/>
                                                       #nullable enable
                                                       using System;
                                                       using System.Collections.Generic;
                                                       using X39.SourceGenerators.Property;
                                                       using System.ComponentModel.DataAnnotations;

                                                       namespace TestNamespace;
                                                       partial class EqualityCheckCustom
                                                       {
                                                           public int Field
                                                           {
                                                               get => _field;
                                                               set
                                                               {
                                                                   if (CustomEqualityCheck(_field, value)) return;
                                                                   _field = value;
                                                               }
                                                           }
                                                       }

                                                       """;

    private const string EqualityCheckNoneCode = """
                                                 using X39.SourceGenerators.Property;
                                                 using System.ComponentModel.DataAnnotations;
                                                 namespace TestNamespace;

                                                 public partial class EqualityCheckNone
                                                 {
                                                     [EqualityCheck(EEqualityCheckMode.None)]
                                                     private int _field;
                                                 }
                                                 """;

    private const string EqualityCheckNoneExpected = """
                                                     // <auto-generated/>
                                                     #nullable enable
                                                     using System;
                                                     using System.Collections.Generic;
                                                     using X39.SourceGenerators.Property;
                                                     using System.ComponentModel.DataAnnotations;

                                                     namespace TestNamespace;
                                                     partial class EqualityCheckNone
                                                     {
                                                         public int Field
                                                         {
                                                             get => _field;
                                                             set
                                                             {
                                                                 _field = value;
                                                             }
                                                         }
                                                     }

                                                     """;

    private const string SingleGuardCode = """
                                           using X39.SourceGenerators.Property;
                                           using System.ComponentModel.DataAnnotations;
                                           namespace TestNamespace;

                                           public partial class SingleGuard
                                           {
                                               private bool GuardMethod(int oldValue, int newValue) => true;
                                               [Guard(nameof(GuardMethod))]
                                               private int _field;
                                           }
                                           """;

    private const string SingleGuardExpected = """
                                               // <auto-generated/>
                                               #nullable enable
                                               using System;
                                               using System.Collections.Generic;
                                               using X39.SourceGenerators.Property;
                                               using System.ComponentModel.DataAnnotations;

                                               namespace TestNamespace;
                                               partial class SingleGuard
                                               {
                                                   public int Field
                                                   {
                                                       get => _field;
                                                       set
                                                       {
                                                           if (value.Equals(_field)) return;
                                                           if (!GuardMethod(_field, value))
                                                               throw new System.ArgumentException("Validation of Field failed: Guard method GuardMethod failed", nameof(value));
                                                           _field = value;
                                                       }
                                                   }
                                               }

                                               """;

    private const string MultipleGuardsCode = """
                                              using X39.SourceGenerators.Property;
                                              using System.ComponentModel.DataAnnotations;
                                              namespace TestNamespace;

                                              public partial class MultipleGuards
                                              {
                                                  private bool GuardMethod1(int oldValue, int newValue) => true;
                                                  private bool GuardMethod2(int oldValue, int newValue) => true;
                                                  [Guard(nameof(GuardMethod1)), Guard(nameof(GuardMethod2))]
                                                  private int _field;
                                              }
                                              """;

    private const string MultipleGuardsExpected = """
                                                  // <auto-generated/>
                                                  #nullable enable
                                                  using System;
                                                  using System.Collections.Generic;
                                                  using X39.SourceGenerators.Property;
                                                  using System.ComponentModel.DataAnnotations;

                                                  namespace TestNamespace;
                                                  partial class MultipleGuards
                                                  {
                                                      public int Field
                                                      {
                                                          get => _field;
                                                          set
                                                          {
                                                              if (value.Equals(_field)) return;
                                                              if (!GuardMethod1(_field, value))
                                                                  throw new System.ArgumentException("Validation of Field failed: Guard method GuardMethod1 failed", nameof(value));
                                                              if (!GuardMethod2(_field, value))
                                                                  throw new System.ArgumentException("Validation of Field failed: Guard method GuardMethod2 failed", nameof(value));
                                                              _field = value;
                                                          }
                                                      }
                                                  }

                                                  """;

    private const string ValidationStrategyExceptionWithGuardCode = """
                                                                    using X39.SourceGenerators.Property;
                                                                    using System.ComponentModel.DataAnnotations;
                                                                    namespace TestNamespace;

                                                                    public partial class ValidationStrategyExceptionWithGuard
                                                                    {
                                                                        private bool GuardMethod(int oldValue, int newValue) => true;
                                                                        [ValidationStrategy(EValidationStrategy.Exception), Guard(nameof(GuardMethod))]
                                                                        private int _field;
                                                                    }
                                                                    """;

    private const string ValidationStrategyExceptionWithGuardExpected = """
                                                                        // <auto-generated/>
                                                                        #nullable enable
                                                                        using System;
                                                                        using System.Collections.Generic;
                                                                        using X39.SourceGenerators.Property;
                                                                        using System.ComponentModel.DataAnnotations;

                                                                        namespace TestNamespace;
                                                                        partial class ValidationStrategyExceptionWithGuard
                                                                        {
                                                                            public int Field
                                                                            {
                                                                                get => _field;
                                                                                set
                                                                                {
                                                                                    if (value.Equals(_field)) return;
                                                                                    if (!GuardMethod(_field, value))
                                                                                        throw new System.ArgumentException("Validation of Field failed: Guard method GuardMethod failed", nameof(value));
                                                                                    _field = value;
                                                                                }
                                                                            }
                                                                        }

                                                                        """;

    private const string ValidationStrategyRollbackWithGuardAndNotifyPropertyChangedCode = """
        using X39.SourceGenerators.Property;
        using System.ComponentModel.DataAnnotations;
        namespace TestNamespace;

        public partial class ValidationStrategyRollbackWithGuardAndNotifyPropertyChanged : System.ComponentModel.INotifyPropertyChanged
        {
            public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
            
            private bool GuardMethod(int oldValue, int newValue) => true;
            [ValidationStrategy(EValidationStrategy.Rollback), Guard(nameof(GuardMethod)), NotifyPropertyChanged]
            private int _field;
        }
        """;

    private const string ValidationStrategyRollbackWithGuardAndNotifyPropertyChangedExpected = """
        // <auto-generated/>
        #nullable enable
        using System;
        using System.Collections.Generic;
        using X39.SourceGenerators.Property;
        using System.ComponentModel.DataAnnotations;

        namespace TestNamespace;
        partial class ValidationStrategyRollbackWithGuardAndNotifyPropertyChanged
        {
            public int Field
            {
                get => _field;
                set
                {
                    if (value.Equals(_field)) return;
                    if (!GuardMethod(_field, value))
                    {
                        this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                        return;
                    }
                    _field = value;
                    this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                }
            }
        }

        """;

    private const string ValidationStrategyIgnoreWithGuardAndNotifyPropertyChangedCode = """
        using X39.SourceGenerators.Property;
        using System.ComponentModel.DataAnnotations;
        namespace TestNamespace;

        public partial class ValidationStrategyIgnoreWithGuardAndNotifyPropertyChanged : System.ComponentModel.INotifyPropertyChanged
        {
            public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
            
            private bool GuardMethod(int oldValue, int newValue) => true;
            [ValidationStrategy(EValidationStrategy.Ignore), Guard(nameof(GuardMethod)), NotifyPropertyChanged]
            private int _field;
        }
        """;

    private const string ValidationStrategyIgnoreWithGuardAndNotifyPropertyChangedExpected = """
        // <auto-generated/>
        #nullable enable
        using System;
        using System.Collections.Generic;
        using X39.SourceGenerators.Property;
        using System.ComponentModel.DataAnnotations;

        namespace TestNamespace;
        partial class ValidationStrategyIgnoreWithGuardAndNotifyPropertyChanged
        {
            public int Field
            {
                get => _field;
                set
                {
                    if (value.Equals(_field)) return;
                    if (!GuardMethod(_field, value))
                        return;
                    _field = value;
                    this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                }
            }
        }

        """;

    private const string ValidationStrategyExceptionWithGuardAndNotifyPropertyChangedCode = """
        using X39.SourceGenerators.Property;
        using System.ComponentModel.DataAnnotations;
        namespace TestNamespace;

        public partial class ValidationStrategyExceptionWithGuardAndNotifyPropertyChanged : System.ComponentModel.INotifyPropertyChanged
        {
            public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
            
            private bool GuardMethod(int oldValue, int newValue) => true;
            [ValidationStrategy(EValidationStrategy.Exception), Guard(nameof(GuardMethod)), NotifyPropertyChanged]
            private int _field;
        }
        """;

    private const string ValidationStrategyExceptionWithGuardAndNotifyPropertyChangedExpected = """
        // <auto-generated/>
        #nullable enable
        using System;
        using System.Collections.Generic;
        using X39.SourceGenerators.Property;
        using System.ComponentModel.DataAnnotations;

        namespace TestNamespace;
        partial class ValidationStrategyExceptionWithGuardAndNotifyPropertyChanged
        {
            public int Field
            {
                get => _field;
                set
                {
                    if (value.Equals(_field)) return;
                    if (!GuardMethod(_field, value))
                        throw new System.ArgumentException("Validation of Field failed: Guard method GuardMethod failed", nameof(value));
                    _field = value;
                    this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                }
            }
        }

        """;

    private const string PropertyEncapsulationCode = """
                                                     using X39.SourceGenerators.Property;
                                                     using System.ComponentModel.DataAnnotations;
                                                     namespace TestNamespace;

                                                     public partial class PropertyEncapsulation
                                                     {
                                                         [PropertyEncapsulation(EPropertyEncapsulation.Public)]
                                                         private int _publicField;
                                                         
                                                         [PropertyEncapsulation(EPropertyEncapsulation.Protected)]
                                                         private int _protectedField;
                                                         
                                                         [PropertyEncapsulation(EPropertyEncapsulation.Private)]
                                                         private int _privateField;
                                                         
                                                         [PropertyEncapsulation(EPropertyEncapsulation.Internal)]
                                                         private int _internalField;
                                                         
                                                         [PropertyEncapsulation(EPropertyEncapsulation.ProtectedInternal)]
                                                         private int _protectedInternalField;
                                                     }
                                                     """;

    private const string PropertyEncapsulationExpected = """
                                                         // <auto-generated/>
                                                         #nullable enable
                                                         using System;
                                                         using System.Collections.Generic;
                                                         using X39.SourceGenerators.Property;
                                                         using System.ComponentModel.DataAnnotations;

                                                         namespace TestNamespace;
                                                         partial class PropertyEncapsulation
                                                         {
                                                             public int Public
                                                             {
                                                                 get => _publicField;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_publicField)) return;
                                                                     _publicField = value;
                                                                 }
                                                             }
                                                             protected int Protected
                                                             {
                                                                 get => _protectedField;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_protectedField)) return;
                                                                     _protectedField = value;
                                                                 }
                                                             }
                                                             private int Private
                                                             {
                                                                 get => _privateField;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_privateField)) return;
                                                                     _privateField = value;
                                                                 }
                                                             }
                                                             internal int Internal
                                                             {
                                                                 get => _internalField;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_internalField)) return;
                                                                     _internalField = value;
                                                                 }
                                                             }
                                                             protected internal int ProtectedInternal
                                                             {
                                                                 get => _protectedInternalField;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_protectedInternalField)) return;
                                                                     _protectedInternalField = value;
                                                                 }
                                                             }
                                                         }

                                                         """;

    private const string PropertyAttributeAttributeOnClassCode = """
                                                                 using X39.SourceGenerators.Property;
                                                                 using System.ComponentModel.DataAnnotations;
                                                                 namespace TestNamespace;

                                                                 [PropertyAttribute("System.ComponentModel.DataAnnotations.Range(5, 6), System.ComponentModel.DataAnnotations.MaxLength(123)")]
                                                                 public partial class PropertyAttributeAttributeOnClass
                                                                 {
                                                                     private int _field;
                                                                 }
                                                                 """;

    private const string PropertyAttributeAttributeOnClassExpected = """
                                                                     // <auto-generated/>
                                                                     #nullable enable
                                                                     using System;
                                                                     using System.Collections.Generic;
                                                                     using X39.SourceGenerators.Property;
                                                                     using System.ComponentModel.DataAnnotations;

                                                                     namespace TestNamespace;
                                                                     partial class PropertyAttributeAttributeOnClass
                                                                     {
                                                                         [System.ComponentModel.DataAnnotations.Range(5, 6), System.ComponentModel.DataAnnotations.MaxLength(123)]
                                                                         public int Field
                                                                         {
                                                                             get => _field;
                                                                             set
                                                                             {
                                                                                 if (value.Equals(_field)) return;
                                                                                 _field = value;
                                                                             }
                                                                         }
                                                                     }

                                                                     """;

    private const string PropertyAttributeAttributeOnFieldCode = """
                                                                 using X39.SourceGenerators.Property;
                                                                 using System.ComponentModel.DataAnnotations;
                                                                 namespace TestNamespace;

                                                                 public partial class PropertyAttributeAttributeOnField
                                                                 {
                                                                     [PropertyAttribute("System.ComponentModel.DataAnnotations.Range(5, 6), System.ComponentModel.DataAnnotations.MaxLength(123)")]
                                                                     private int _field;
                                                                 }
                                                                 """;

    private const string PropertyAttributeAttributeOnFieldExpected = """
                                                                     // <auto-generated/>
                                                                     #nullable enable
                                                                     using System;
                                                                     using System.Collections.Generic;
                                                                     using X39.SourceGenerators.Property;
                                                                     using System.ComponentModel.DataAnnotations;

                                                                     namespace TestNamespace;
                                                                     partial class PropertyAttributeAttributeOnField
                                                                     {
                                                                         [System.ComponentModel.DataAnnotations.Range(5, 6), System.ComponentModel.DataAnnotations.MaxLength(123)]
                                                                         public int Field
                                                                         {
                                                                             get => _field;
                                                                             set
                                                                             {
                                                                                 if (value.Equals(_field)) return;
                                                                                 _field = value;
                                                                             }
                                                                         }
                                                                     }

                                                                     """;

    private const string PropertyAttributeAttributeOnClassAndFieldCode = """
                                                                         using X39.SourceGenerators.Property;
                                                                         using System.ComponentModel.DataAnnotations;
                                                                         namespace TestNamespace;

                                                                         [PropertyAttribute("System.ComponentModel.DataAnnotations.MaxLength(123)")]
                                                                         public partial class PropertyAttributeAttributeOnClassAndField
                                                                         {
                                                                             [PropertyAttribute("System.ComponentModel.DataAnnotations.Range(7, 8)")]
                                                                             private int _field1;
                                                                             
                                                                             [PropertyAttribute("System.ComponentModel.DataAnnotations.Range(7, 8)", inherit: true)]
                                                                             private int _field2;
                                                                         }
                                                                         """;

    private const string PropertyAttributeAttributeOnClassAndFieldExpected = """
                                                                             // <auto-generated/>
                                                                             #nullable enable
                                                                             using System;
                                                                             using System.Collections.Generic;
                                                                             using X39.SourceGenerators.Property;
                                                                             using System.ComponentModel.DataAnnotations;

                                                                             namespace TestNamespace;
                                                                             partial class PropertyAttributeAttributeOnClassAndField
                                                                             {
                                                                                 [System.ComponentModel.DataAnnotations.Range(7, 8)]
                                                                                 public int Field1
                                                                                 {
                                                                                     get => _field1;
                                                                                     set
                                                                                     {
                                                                                         if (value.Equals(_field1)) return;
                                                                                         _field1 = value;
                                                                                     }
                                                                                 }
                                                                                 [System.ComponentModel.DataAnnotations.Range(7, 8)]
                                                                                 [System.ComponentModel.DataAnnotations.MaxLength(123)]
                                                                                 public int Field2
                                                                                 {
                                                                                     get => _field2;
                                                                                     set
                                                                                     {
                                                                                         if (value.Equals(_field2)) return;
                                                                                         _field2 = value;
                                                                                     }
                                                                                 }
                                                                             }

                                                                             """;

    private const string WithDisableAttributeTakeoverOnClassCode = """
                                                                   using X39.SourceGenerators.Property;
                                                                   using System.ComponentModel.DataAnnotations;
                                                                   namespace TestNamespace;

                                                                   [DisableAttributeTakeover]
                                                                   public partial class WithDisableAttributeTakeoverOnClass
                                                                   {
                                                                       [Range(5, 6)]
                                                                       private int _field;
                                                                   }
                                                                   """;

    private const string WithDisableAttributeTakeoverOnClassExpected = """
                                                                       // <auto-generated/>
                                                                       #nullable enable
                                                                       using System;
                                                                       using System.Collections.Generic;
                                                                       using X39.SourceGenerators.Property;
                                                                       using System.ComponentModel.DataAnnotations;

                                                                       namespace TestNamespace;
                                                                       partial class WithDisableAttributeTakeoverOnClass
                                                                       {
                                                                           public int Field
                                                                           {
                                                                               get => _field;
                                                                               set
                                                                               {
                                                                                   if (value.Equals(_field)) return;
                                                                                   if (value < 5 || value > 6)
                                                                                       throw new System.ArgumentException("Validation of Field failed: Value must be between 5 and 6", nameof(value));
                                                                                   _field = value;
                                                                               }
                                                                           }
                                                                       }

                                                                       """;

    private const string WithDisableAttributeTakeoverOnFieldCode = """
                                                                   using X39.SourceGenerators.Property;
                                                                   using System.ComponentModel.DataAnnotations;
                                                                   namespace TestNamespace;

                                                                   public partial class WithDisableAttributeTakeoverOnField
                                                                   {
                                                                       [DisableAttributeTakeover]
                                                                       [Range(5, 6)]
                                                                       private int _field1;
                                                                       
                                                                       [Range(5, 6)]
                                                                       private int _field2;
                                                                   }
                                                                   """;

    private const string WithDisableAttributeTakeoverOnFieldExpected = """
                                                                       // <auto-generated/>
                                                                       #nullable enable
                                                                       using System;
                                                                       using System.Collections.Generic;
                                                                       using X39.SourceGenerators.Property;
                                                                       using System.ComponentModel.DataAnnotations;

                                                                       namespace TestNamespace;
                                                                       partial class WithDisableAttributeTakeoverOnField
                                                                       {
                                                                           public int Field1
                                                                           {
                                                                               get => _field1;
                                                                               set
                                                                               {
                                                                                   if (value.Equals(_field1)) return;
                                                                                   if (value < 5 || value > 6)
                                                                                       throw new System.ArgumentException("Validation of Field1 failed: Value must be between 5 and 6", nameof(value));
                                                                                   _field1 = value;
                                                                               }
                                                                           }
                                                                           [System.ComponentModel.DataAnnotations.RangeAttribute(5, 6)]
                                                                           public int Field2
                                                                           {
                                                                               get => _field2;
                                                                               set
                                                                               {
                                                                                   if (value.Equals(_field2)) return;
                                                                                   if (value < 5 || value > 6)
                                                                                       throw new System.ArgumentException("Validation of Field2 failed: Value must be between 5 and 6", nameof(value));
                                                                                   _field2 = value;
                                                                               }
                                                                           }
                                                                       }

                                                                       """;

    private const string WithoutDisableAttributeTakeoverOnFieldCode = """
                                                                      using X39.SourceGenerators.Property;
                                                                      using System.ComponentModel.DataAnnotations;
                                                                      namespace TestNamespace;

                                                                      [GenerateProperties]
                                                                      public partial class WithoutDisableAttributeTakeoverOnField
                                                                      {
                                                                          [Range(5, 6)]
                                                                          private int _field;
                                                                      }
                                                                      """;

    private const string WithoutDisableAttributeTakeoverOnFieldExpected = """
                                                                          // <auto-generated/>
                                                                          #nullable enable
                                                                          using System;
                                                                          using System.Collections.Generic;
                                                                          using X39.SourceGenerators.Property;
                                                                          using System.ComponentModel.DataAnnotations;

                                                                          namespace TestNamespace;
                                                                          partial class WithoutDisableAttributeTakeoverOnField
                                                                          {
                                                                              [System.ComponentModel.DataAnnotations.RangeAttribute(5, 6)]
                                                                              public int Field
                                                                              {
                                                                                  get => _field;
                                                                                  set
                                                                                  {
                                                                                      if (value.Equals(_field)) return;
                                                                                      if (value < 5 || value > 6)
                                                                                          throw new System.ArgumentException("Validation of Field failed: Value must be between 5 and 6", nameof(value));
                                                                                      _field = value;
                                                                                  }
                                                                              }
                                                                          }

                                                                          """;

    private const string NoPropertyAttributeOnFieldCode = """
                                                          using X39.SourceGenerators.Property;
                                                          using System.ComponentModel.DataAnnotations;
                                                          namespace TestNamespace;

                                                          [GenerateProperties]
                                                          public partial class NoPropertyAttributeOnField
                                                          {
                                                              private int _field1;
                                                              [NoProperty]
                                                              private int _field2;
                                                          }
                                                          """;

    private const string NoPropertyAttributeOnFieldExpected = """
                                                              // <auto-generated/>
                                                              #nullable enable
                                                              using System;
                                                              using System.Collections.Generic;
                                                              using X39.SourceGenerators.Property;
                                                              using System.ComponentModel.DataAnnotations;

                                                              namespace TestNamespace;
                                                              partial class NoPropertyAttributeOnField
                                                              {
                                                                  public int Field1
                                                                  {
                                                                      get => _field1;
                                                                      set
                                                                      {
                                                                          if (value.Equals(_field1)) return;
                                                                          _field1 = value;
                                                                      }
                                                                  }
                                                              }

                                                              """;

    // @formatter:max_line_length 5000
    [Theory]
    [InlineData("NullableDisabled", NullableDisabledCode, NullableDisabledExpected)]
    [InlineData("SetterModeNoReadOnlyDefault", SetterModeNoReadOnlyDefaultCode, SetterModeNoReadOnlyDefaultExpected)]
    [InlineData("SetterModeReadOnlyDefault", SetterModeReadOnlyDefaultCode, SetterModeReadOnlyDefaultExpected)]
    [InlineData("SetterModeReadOnlySet", SetterModeReadOnlySetCode, SetterModeReadOnlySetExpected, new[] { "CS0191" })]
    [InlineData("SetterModeNoReadOnlyInit", SetterModeNoReadOnlyInitCode, SetterModeNoReadOnlyInitExpected)]
    [InlineData("SetterModeNone", SetterModeNoneCode, SetterModeNoneExpected)]
    [InlineData("GetterModeDefault", GetterModeDefaultCode, GetterModeDefaultExpected)]
    [InlineData("GetterModeNone", GetterModeNoneCode, GetterModeNoneExpected)]
    [InlineData("GeneratePropertiesOnClass", GeneratePropertiesOnClassCode, GeneratePropertiesOnClassExpected)]
    [InlineData("PropertiesBackingFieldIsLeftUnaffected", PropertiesBackingFieldIsLeftUnaffectedCode, PropertiesBackingFieldIsLeftUnaffectedExpected)]
    [InlineData("GeneratePropertiesOnField", GeneratePropertiesOnFieldCode, GeneratePropertiesOnFieldExpected)]
    [InlineData("NotifyPropertyChangedOnAllDefaultGeneration", NotifyPropertyChangedOnAllDefaultGenerationCode, NotifyPropertyChangedOnAllDefaultGenerationExpected)]
    [InlineData("NotifyPropertyChangedOnAllWithGeneration", NotifyPropertyChangedOnAllWithGenerationCode, NotifyPropertyChangedOnAllWithGenerationExpected)]
    [InlineData("NotifyPropertyChangedOnAllNoGeneration", NotifyPropertyChangedOnAllNoGenerationCode, NotifyPropertyChangedOnAllNoGenerationExpected)]
    [InlineData("NotifyPropertyChangedOnField", NotifyPropertyChangedOnFieldCode, NotifyPropertyChangedOnFieldExpected)]
    [InlineData("NotifyPropertyChangingOnAllDefaultGeneration", NotifyPropertyChangingOnAllDefaultGenerationCode, NotifyPropertyChangingOnAllDefaultGenerationExpected)]
    [InlineData("NotifyPropertyChangingOnAllWithGeneration", NotifyPropertyChangingOnAllWithGenerationCode, NotifyPropertyChangingOnAllWithGenerationExpected)]
    [InlineData("NotifyPropertyChangingOnAllNoGeneration", NotifyPropertyChangingOnAllNoGenerationCode, NotifyPropertyChangingOnAllNoGenerationExpected)]
    [InlineData("NotifyPropertyChangingOnField", NotifyPropertyChangingOnFieldCode, NotifyPropertyChangingOnFieldExpected)]
    [InlineData("PropertyName", PropertyNameCode, PropertyNameExpected)]
    [InlineData("MaxLengthValidation", MaxLengthValidationCode, MaxLengthValidationExpected)]
    [InlineData("IntRangeValidation", IntRangeValidationCode, IntRangeValidationExpected)]
    [InlineData("DoubleRangeValidation", DoubleRangeValidationCode, DoubleRangeValidationExpected)]
    [InlineData("ExplicitTypeRangeValidation", ExplicitTypeRangeValidationCode, ExplicitTypeRangeValidationExpected)]
    [InlineData("EqualityCheckDefault", EqualityCheckDefaultCode, EqualityCheckDefaultExpected)]
    [InlineData("EqualityCheckCustom", EqualityCheckCustomCode, EqualityCheckCustomExpected)]
    [InlineData("EqualityCheckNone", EqualityCheckNoneCode, EqualityCheckNoneExpected)]
    [InlineData("SingleGuard", SingleGuardCode, SingleGuardExpected)]
    [InlineData("MultipleGuards", MultipleGuardsCode, MultipleGuardsExpected)]
    [InlineData("PropertyEncapsulation", PropertyEncapsulationCode, PropertyEncapsulationExpected)]
    [InlineData("ValidationStrategyExceptionWithGuard", ValidationStrategyExceptionWithGuardCode, ValidationStrategyExceptionWithGuardExpected)]
    [InlineData("ValidationStrategyRollbackWithGuardAndNotifyPropertyChanged", ValidationStrategyRollbackWithGuardAndNotifyPropertyChangedCode, ValidationStrategyRollbackWithGuardAndNotifyPropertyChangedExpected)]
    [InlineData("ValidationStrategyIgnoreWithGuardAndNotifyPropertyChanged", ValidationStrategyIgnoreWithGuardAndNotifyPropertyChangedCode, ValidationStrategyIgnoreWithGuardAndNotifyPropertyChangedExpected)]
    [InlineData("ValidationStrategyExceptionWithGuardAndNotifyPropertyChanged", ValidationStrategyExceptionWithGuardAndNotifyPropertyChangedCode, ValidationStrategyExceptionWithGuardAndNotifyPropertyChangedExpected)]
    [InlineData("PropertyAttributeAttributeOnClass", PropertyAttributeAttributeOnClassCode, PropertyAttributeAttributeOnClassExpected)]
    [InlineData("PropertyAttributeAttributeOnField", PropertyAttributeAttributeOnFieldCode, PropertyAttributeAttributeOnFieldExpected)]
    [InlineData("PropertyAttributeAttributeOnClassAndField", PropertyAttributeAttributeOnClassAndFieldCode, PropertyAttributeAttributeOnClassAndFieldExpected)]
    [InlineData("WithDisableAttributeTakeoverOnClass", WithDisableAttributeTakeoverOnClassCode, WithDisableAttributeTakeoverOnClassExpected)]
    [InlineData("WithDisableAttributeTakeoverOnField", WithDisableAttributeTakeoverOnFieldCode, WithDisableAttributeTakeoverOnFieldExpected)]
    [InlineData("WithoutDisableAttributeTakeoverOnField", WithoutDisableAttributeTakeoverOnFieldCode, WithoutDisableAttributeTakeoverOnFieldExpected)]
    [InlineData("NoPropertyAttributeOnField", NoPropertyAttributeOnFieldCode, NoPropertyAttributeOnFieldExpected)]
    [InlineData("NullableHandling", NullableHandlingCode, NullableHandlingExpected)]
    [InlineData("DocumentationTakeover", DocumentationTakeoverCode, DocumentationTakeoverExpected)]
    [InlineData("NotifyOn", NotifyOnCode, NotifyOnExpected)]
    // @formatter:max_line_length restore
    public void TestGeneratedClass(string className, string code, string expected, string[]? acceptedErrors = null)
    {
        acceptedErrors ??= [];
        // Create an instance of the source generator.
        var generator = new PropertyIncrementalSourceGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var assemblies = AppDomain
            .CurrentDomain.GetAssemblies()
            .Where(a => !a.IsDynamic && !string.IsNullOrWhiteSpace(a.Location))
            .OrderBy((q) => q.Location)
            .ToArray();
        var assemblyDir = Path.GetDirectoryName(assemblies.Single(q => q.Location.EndsWith("netstandard.dll")).Location)
                          ?? throw new InvalidOperationException(
                              "Could not find the directory of the netstandard.dll assembly."
                          );
        var compilation = CSharpCompilation.Create(
            nameof(PropertyIncrementalSourceGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(code) },
            assemblies
                .Select(assembly => assembly.Location)
                .Append(Path.Combine(assemblyDir, "System.ComponentModel.Annotations.dll"))
                .Select(path => MetadataReference.CreateFromFile(path))
                .ToArray(),
            new CSharpCompilationOptions(
                outputKind: OutputKind.DynamicallyLinkedLibrary,
                reportSuppressedDiagnostics: true,
                optimizationLevel: OptimizationLevel.Debug
            )
        );
        // Run generators and retrieve all results.
        var runResult = driver
            .RunGeneratorsAndUpdateCompilation(compilation, out var newCompilation, out var _)
            .GetRunResult();

        // Verify that the compilation has no errors.
        var diagnostics = newCompilation.GetDiagnostics();
        Assert.Empty(diagnostics.Where(d => d.Severity == DiagnosticSeverity.Error && !acceptedErrors.Contains(d.Id)));

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFiles = runResult
            .GeneratedTrees.Where(t => t.FilePath.EndsWith(".g.cs"))
            .Select((q) => (q.FilePath, Code: q.GetText().ToString()))
            .ToArray();


        // Complex generators should be tested using text comparison.
        var attributesOutput = generatedFiles
            .Single(f => f.FilePath.EndsWith("X39.SourceGenerators.Property.g.cs"))
            .Code;
        Assert.Equal(AttributesGenerated, attributesOutput, ignoreLineEndingDifferences: true);
        var classOutput = generatedFiles.Single(f => f.FilePath.EndsWith(string.Concat(className, ".g.cs"))).Code;
        Assert.Equal(expected, classOutput, ignoreLineEndingDifferences: true);
    }

    private const string AttributesGenerated = """
                                               // <auto-generated/>

                                               #nullable enable
                                               using System;
                                               using System.Runtime.CompilerServices;

                                               namespace X39.SourceGenerators.Property
                                               {
                                                   /// <summary>
                                                   /// Makes the field or class, annotated with the 'NotifyPropertyChanged' attribute, create
                                                   /// properties which raise the PropertyChanged event when changed.
                                                   /// For a decorated class, all fields will be considered for property generation and the
                                                   /// PropertyChanged event will be implemented too.
                                                   /// </summary>
                                                   /// <remarks>
                                                   /// The name of the property generated will be the Capitalized name of the field, minus any leading underscores.
                                                   /// If the field is annotated with the 'PropertyName' attribute,
                                                   /// the name of the property will be the value of the 'PropertyName' attribute.
                                                   /// </remarks>
                                                   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class NotifyPropertyChangedAttribute : Attribute
                                                   {
                                                       public bool GenerateEvent { get; }
                                               
                                                       /// <summary>
                                                       /// Makes the field or class, annotated with the 'NotifyPropertyChanged' attribute, create
                                                       /// properties which raise the PropertyChanged event when changed.
                                                       /// For a decorated class, all fields will be considered for property generation and the
                                                       /// PropertyChanged event will be implemented too.
                                                       /// </summary>
                                                       /// <remarks>
                                                       /// The name of the property generated will be the Capitalized name of the field, minus any leading underscores.
                                                       /// If the field is annotated with the 'PropertyName' attribute,
                                                       /// the name of the property will be the value of the 'PropertyName' attribute.
                                                       /// </remarks>
                                                       /// <param name="generateEvent">
                                                       ///     If true, the PropertyChanged event will be generated (as in: Added to the generated class).
                                                       ///     If false, the PropertyChanged event will not be generated and must be supplied by the user.
                                                       /// </param>
                                                       public NotifyPropertyChangedAttribute(bool generateEvent = true) { GenerateEvent = generateEvent; }
                                                   }
                                               
                                                   /// <summary>
                                                   /// Allows to mark a property to be part of the notify changed/-ing chain
                                                   /// of a generated property.
                                                   /// </summary>
                                                   /// <remarks>
                                                   /// This attribute will not error if the referenced property name is not
                                                   /// generated by the generator. It will just not work as intended in
                                                   /// that case.
                                                   /// </remarks>
                                                   /// <example>
                                                   /// <code>
                                                   /// // [...]
                                                   /// private float _amount;
                                                   /// 
                                                   /// [NotifyOn(nameof(Amount))]
                                                   /// public string Money => $"{Amount} €";
                                                   /// // [...]
                                                   /// </code>
                                                   /// </example>
                                                   [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class NotifyOnAttribute : Attribute
                                                   {
                                                       /// <summary>
                                                       /// The property this property wants to be notified on.
                                                       /// </summary>
                                                       public string Property { get; }
                                                   
                                                       /// <summary>
                                                       /// Allows to mark a property to be part of the notify changed/-ing chain
                                                       /// of a generated property.
                                                       /// </summary>
                                                       /// <param name="property">The name of the property to be notified on.</param>
                                                       public NotifyOnAttribute(string property)
                                                       {
                                                           Property = property;
                                                       }
                                                   }
                                               
                                                   /// <summary>
                                                   /// Allows to change the generator behavior for the getter of a property.
                                                   /// </summary>
                                                   [AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class GetterAttribute : Attribute
                                                   {
                                                       /// <summary>
                                                       /// The getter mode to use.
                                                       /// </summary>
                                                       public EGetterMode Mode { get; }
                                               
                                                       /// <summary>
                                                       /// Allows to change the generator behavior for the getter of a property.
                                                       /// </summary>
                                                       /// <param name="mode">The getter mode to use.</param>
                                                       public GetterAttribute(EGetterMode mode = EGetterMode.Default)
                                                       {
                                                           Mode = mode;
                                                       }
                                                   }
                                               
                                                   /// <summary>
                                                   /// Enum containing the possible getter modes for the <see cref="GetterAttribute"/>.
                                                   /// </summary>
                                                   internal enum EGetterMode
                                                   {
                                                       /// <summary>
                                                       /// The default behavior, leaving the choice to the generator.
                                                       /// </summary>
                                                       /// <remarks>
                                                       /// As this is the getter mode,
                                                       /// the default behavior is always to generate the getter.
                                                       /// </remarks>
                                                       Default,
                                               
                                                       /// <summary>
                                                       /// The getter will not be generated.
                                                       /// </summary>
                                                       None,
                                                   }
                                               
                                                   /// <summary>
                                                   /// Specifies that the field annotated with the 'Setter' attribute should generate a setter method.
                                                   /// This also may be used to only allow the setter to be initialized.
                                                   /// </summary>
                                                   /// <remarks>
                                                   /// By default, the setter method will be generated according to the specified 'ESetterMode' value.
                                                   /// </remarks>
                                                   [AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class SetterAttribute : Attribute
                                                   {
                                                       /// <summary>
                                                       /// The getter mode to use.
                                                       /// </summary>
                                                       public ESetterMode Mode { get; }
                                               
                                                       /// <summary>
                                                       /// Specifies the behavior of the setter method generated for a field annotated with the 'Setter' attribute.
                                                       /// </summary>
                                                       public SetterAttribute(ESetterMode mode = ESetterMode.Default)
                                                       {
                                                           Mode = mode;
                                                       }
                                                   }
                                               
                                                   /// <summary>
                                                   /// Represents the mode for generating setter behavior in a property.
                                                   /// </summary>
                                                   internal enum ESetterMode
                                                   {
                                                       /// <summary>
                                                       /// The default behavior, leaving the choice to the generator.
                                                       /// </summary>
                                                       /// <remarks>
                                                       /// The default behavior is to either generate a setter
                                                       /// using set if the field is not readonly
                                                       /// or generate it using init if the field is readonly.
                                                       /// </remarks>
                                                       Default,
                                               
                                                       /// <summary>
                                                       /// The setter will be forced to generate using the set keyword.
                                                       /// </summary>
                                                       /// <remarks>
                                                       /// This behavior will break readonly fields.
                                                       /// use with caution.
                                                       /// </remarks>
                                                       Set,
                                               
                                                       /// <summary>
                                                       /// The setter will be forced to generate using the init keyword.
                                                       /// </summary>
                                                       Init,
                                               
                                                       /// <summary>
                                                       /// The setter will not be generated.
                                                       /// </summary>
                                                       None,
                                                   }
                                               
                                                   /// <summary>
                                                   /// Makes the field or class, annotated with the 'NotifyPropertyChanging' attribute, create
                                                   /// properties which raise the PropertyChanging event when changed.
                                                   /// For a decorated class, all fields will be considered for property generation and the
                                                   /// PropertyChanging event will be implemented too.
                                                   /// </summary>
                                                   /// <remarks>
                                                   /// The name of the property generated will be the Capitalized name of the field, minus any leading underscores.
                                                   /// If the field is annotated with the 'PropertyName' attribute,
                                                   /// the name of the property will be the value of the 'PropertyName' attribute.
                                                   /// </remarks>
                                                   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class NotifyPropertyChangingAttribute : Attribute
                                                   {
                                                       public bool GenerateEvent { get; }
                                               
                                                       /// <summary>
                                                       /// Makes the field or class, annotated with the 'NotifyPropertyChanging' attribute, create
                                                       /// properties which raise the PropertyChanging event when changed.
                                                       /// For a decorated class, all fields will be considered for property generation and the
                                                       /// PropertyChanging event will be implemented too.
                                                       /// </summary>
                                                       /// <remarks>
                                                       /// The name of the property generated will be the Capitalized name of the field, minus any leading underscores.
                                                       /// If the field is annotated with the 'PropertyName' attribute,
                                                       /// the name of the property will be the value of the 'PropertyName' attribute.
                                                       /// </remarks>
                                                       /// <param name="generateEvent">
                                                       ///     If true, the PropertyChanging event will be generated (as in: Added to the generated class).
                                                       ///     If false, the PropertyChanging event will not be generated and must be supplied by the user.
                                                       /// </param>
                                                       public NotifyPropertyChangingAttribute(bool generateEvent = true) { GenerateEvent = generateEvent; }
                                                   }
                                               
                                                   /// <summary>
                                                   /// Enum containing the possible validation strategies for the <see cref="ValidationStrategyAttribute"/>.
                                                   /// </summary>
                                                   [CompilerGenerated]
                                                   public enum EValidationStrategy
                                                   {
                                                       /// <summary>
                                                       /// Throw an exception when the validation fails.
                                                       /// </summary>
                                                       /// <remarks>
                                                       /// This is the default behavior.
                                                       /// </remarks>
                                                       Exception,
                                               
                                                       /// <summary>
                                                       /// Rollback the changes when the validation fails.
                                                       /// </summary>
                                                       /// <remarks>
                                                       /// Unless another property (eg. NotifyPropertyChanged) is also added,
                                                       /// this mode behaves like the <see cref="Ignore"/> mode.
                                                       /// If such a property is present, the corresponding side effects will be taken into account
                                                       /// (eg. PropertyChanged event will be raised to notify the UI about the change in the value, albeit the
                                                       /// value not having been changed in the underlying data store).
                                                       /// </remarks>
                                                       Rollback,
                                               
                                                       /// <summary>
                                                       /// Ignore the changes when the validation fails.
                                                       /// </summary>
                                                       /// <remarks>
                                                       /// If changes are ignored, the code will exit immediately without any further action (without side effects).
                                                       /// </remarks>
                                                       Ignore,
                                                   }
                                               
                                                   /// <summary>
                                                   /// Makes the field or class, annotated with the 'ValidationStrategy' attribute, create
                                                   /// Properties which, for a given validation, will behave according to the specified strategy.
                                                   /// </summary>
                                                   /// <seealso cref="System.ComponentModel.DataAnnotations.MaxLengthAttribute"/>
                                                   /// <seealso cref="System.ComponentModel.DataAnnotations.RangeAttribute"/>
                                                   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class ValidationStrategyAttribute : Attribute
                                                   {
                                                       public EValidationStrategy Strategy { get; }
                                               
                                                       /// <summary>
                                                       /// Makes the field or class, annotated with the 'ValidationStrategy' attribute, create
                                                       /// Properties which, for a given validation, will behave according to the specified strategy.
                                                       /// </summary>
                                                       /// <seealso cref="System.ComponentModel.DataAnnotations.MaxLengthAttribute"/>
                                                       /// <seealso cref="System.ComponentModel.DataAnnotations.RangeAttribute"/>
                                                       public ValidationStrategyAttribute(EValidationStrategy strategy = EValidationStrategy.Exception)
                                                       {
                                                           Strategy = strategy;
                                                       }
                                                   }
                                               
                                                   /// <summary>
                                                   /// Makes the field annotated with the 'PropertyName' attribute, create a property with the specified name.
                                                   /// </summary>
                                                   [AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class PropertyNameAttribute : Attribute
                                                   {
                                                       public string Name { get; }
                                               
                                                       /// <summary>
                                                       /// Makes the field annotated with the 'PropertyName' attribute, create a property with the specified name.
                                                       /// </summary>
                                                       public PropertyNameAttribute(string name) { Name = name; }
                                                   }
                                               
                                                   /// <summary>
                                                   /// Allows to add attributes to the generated properties which normally would not be allowed on eg. fields or classes.
                                                   /// </summary>
                                                   /// <remarks>
                                                   /// This attribute will, unless explicitly requested, override the defaults set by a class annotated with this,
                                                   /// when used on a field.
                                                   /// The default inheritance behavior cannot be changed when used on a class,
                                                   /// but only one field has to change the inheritance behavior to inherit.
                                                   /// </remarks>
                                                   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class PropertyAttributeAttribute : Attribute
                                                   {
                                                       public string AttributeDefinition { get; }
                                                       public bool   Inherit             { get; }
                                               
                                                       /// <summary>
                                                       /// Allows to add attributes to the generated properties which normally would not be allowed on eg. fields or classes.
                                                       /// </summary>
                                                       /// <param name="attributeDefinition">The full attribute definition as it would normally be written in code.</param>
                                                       /// <param name="inherit">
                                                       ///     When <see langword="true"/>, the attribute will be appended to the class defined attributes.
                                                       ///     When <see langword="false"/>, the attribute will override the class defined attributes.
                                                       /// The default inheritance behavior cannot be changed when used on a class,
                                                       /// but only one field has to change the inheritance behavior to inherit.
                                                       /// </param>
                                                       /// <example>
                                                       /// <code>
                                                       /// [PropertyAttribute("Range(0, 100)")]
                                                       /// [PropertyAttribute("[Range(0, 100)]")]
                                                       /// [PropertyAttribute("[Range(0, 100), MaxLength(10)]")]
                                                       /// </code>
                                                       /// </example>
                                                       public PropertyAttributeAttribute(string attributeDefinition, bool inherit = false)
                                                       {
                                                           AttributeDefinition = attributeDefinition;
                                                           Inherit             = inherit;
                                                       }
                                                   }
                                               
                                                   /// <summary>
                                                   /// By default, the generator will take over the properties of the annotated fields.
                                                   /// This attribute allows to disable the takeover for a specific field or the entire class.
                                                   /// </summary>
                                                   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class DisableAttributeTakeoverAttribute : Attribute { }
                                               
                                                   /// <summary>
                                                   /// Enum containing the possible property encapsulation strategies for the <see cref="PropertyEncapsulationAttribute"/>.
                                                   /// </summary>
                                                   [CompilerGenerated]
                                                   public enum EPropertyEncapsulation
                                                   {
                                                       /// <summary>
                                                       /// The property will be public and accessible from anywhere.
                                                       /// </summary>
                                                       Public,
                                               
                                                       /// <summary>
                                                       /// The property will be protected and accessible from the containing class and its derived classes.
                                                       /// </summary>
                                                       Protected,
                                               
                                                       /// <summary>
                                                       /// The property will be private and accessible only from the containing class.
                                                       /// </summary>
                                                       Private,
                                               
                                                       /// <summary>
                                                       /// The property will be internal and accessible only from the containing assembly.
                                                       /// </summary>
                                                       Internal,
                                               
                                                       /// <summary>
                                                       /// The property will be protected internal and accessible from the containing class or the derived
                                                       /// classes living in the same assembly.
                                                       /// </summary>
                                                       ProtectedInternal,
                                                   }
                                               
                                                   /// <summary>
                                                   /// Allows to configure either the default property encapsulation (when applied to a class)
                                                   /// or the property encapsulation for a specific field.
                                                   /// </summary>
                                                   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class PropertyEncapsulationAttribute : Attribute
                                                   {
                                                       public EPropertyEncapsulation Encapsulation { get; }
                                               
                                                       /// <summary>
                                                       /// Allows to configure either the default property encapsulation (when applied to a class)
                                                       /// or the property encapsulation for a specific field.
                                                       /// </summary>
                                                       public PropertyEncapsulationAttribute(EPropertyEncapsulation encapsulation = EPropertyEncapsulation.Public)
                                                       {
                                                           Encapsulation = encapsulation;
                                                       }
                                                   }
                                               
                                                   /// <summary>
                                                   /// When applied to a field, it will make the property generated virtual, allowing to override it in derived classes.
                                                   /// </summary>
                                                   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class VirtualPropertyAttribute : Attribute { }
                                               
                                                   /// <summary>
                                                   /// Allows changing the equality check for a property or disabling it entirely.
                                                   /// </summary>
                                                   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class EqualityCheckAttribute : Attribute
                                                   {
                                                       public EEqualityCheckMode Mode          { get; }
                                                       public float              FloatEpsilon  { get; }
                                                       public double             DoubleEpsilon { get; }
                                                       public string?            Custom        { get; }
                                               
                                                       /// <summary>
                                                       /// Allows changing the equality check for a property or disabling it entirely.
                                                       /// </summary>
                                                       public EqualityCheckAttribute(
                                                           EEqualityCheckMode mode          = EEqualityCheckMode.Default,
                                                           float              floatEpsilon  = Single.Epsilon,
                                                           double             doubleEpsilon = Double.Epsilon,
                                                           string?            custom        = null)
                                                       {
                                                           Mode               = mode;
                                                           this.FloatEpsilon  = floatEpsilon;
                                                           this.DoubleEpsilon = doubleEpsilon;
                                                           this.Custom        = custom;
                                                       }
                                                   }
                                               
                                                   /// <summary>
                                                   /// Enum containing the possible equality check modes for the <see cref="EqualityCheckAttribute"/>.
                                                   /// </summary>
                                                   [CompilerGenerated]
                                                   public enum EEqualityCheckMode
                                                   {
                                                       /// <summary>
                                                       /// The default behavior, using `Equals` for reference types,
                                                       /// `==` for value types and epsilon comparison for floating point types.
                                                       /// </summary>
                                                       /// <seealso cref="Single.Epsilon"/>
                                                       /// <seealso cref="Double.Epsilon"/>
                                                       Default,
                                               
                                                       /// <summary>
                                                       /// The property will be checked for equality using the provided custom comparison.
                                                       /// Here, `value` will be the new value and the field name will be the old value.
                                                       /// All class members may be accessed from within the custom comparison.
                                                       /// </summary>
                                                       /// <seealso cref="GuardAttribute"/>
                                                       Custom,
                                               
                                                       /// <summary>
                                                       /// The property will not be checked for equality.
                                                       /// </summary>
                                                       /// <remarks>
                                                       /// Neither the <see cref="ValidationStrategyAttribute"/> nor the <see cref="GuardAttribute"/> depend on this setting.
                                                       /// </remarks>
                                                       None,
                                                   }
                                               
                                                   /// <summary>
                                                   /// Allows to guard a property from being changed, failing the validation if the guard method does not return true.
                                                   /// </summary>
                                                   /// <remarks>
                                                   /// The guard method will be looked up in the class containing the property unless the
                                                   /// className parameter is set.
                                                   /// The method must be accessible from the containing class, must return a <see cref="bool"/>
                                                   /// and must accept two parameters.
                                                   /// Sample method signature: `bool GuardMethodName(T oldValue, T newValue)`.
                                                   /// </remarks>
                                                   [AttributeUsage(AttributeTargets.Field, AllowMultiple = true, Inherited = false)]
                                                   [CompilerGenerated]
                                                   internal class GuardAttribute : Attribute
                                                   {
                                                       public string MethodName { get; }
                                               
                                                       /// <summary>
                                                       /// Allows to guard a property from being changed, failing the validation if the guard method does not return true.
                                                       /// </summary>
                                                       /// <remarks>
                                                       /// The guard method will be looked up in the class containing the property unless the
                                                       /// <see cref="className"/> parameter is set.
                                                       /// The method must be accessible from the containing class, must return a <see cref="bool"/>
                                                       /// and must accept two parameters.
                                                       /// Sample method signature: `bool GuardMethodName(T oldValue, T newValue)`.
                                                       /// </remarks>
                                                       public GuardAttribute(string methodName, string? className = null) { MethodName = methodName; }
                                                   }
                                               
                                                   /// <summary>
                                                   /// Tells the generator to generate properties for the annotated class or field.
                                                   /// Use this attribute if other attributes are not desired.
                                                   /// </summary>
                                                   [CompilerGenerated]
                                                   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   internal class GeneratePropertiesAttribute : Attribute { }
                                               
                                                   /// <summary>
                                                   /// Instructs the generator to not generate properties for the annotated field.
                                                   /// </summary>
                                                   [CompilerGenerated]
                                                   [AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                   internal class NoPropertyAttribute : Attribute { }
                                               }

                                               """;
}