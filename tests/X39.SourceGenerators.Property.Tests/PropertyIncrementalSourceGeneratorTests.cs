using System;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace X39.SourceGenerators.Property.Tests;

public class PropertyIncrementalSourceGeneratorTests
{
    private const string NotifyPropertyChangingOnAllWithGenerationCode = """
                                                                         using X39.SourceGenerators.Property;
                                                                         namespace TestNamespace;

                                                                         [NotifyPropertyChanging(true)]
                                                                         public partial class NotifyPropertyChangingOnAllWithGeneration
                                                                         {
                                                                             private float _field;
                                                                         }
                                                                         """;

    private const string NotifyPropertyChangingOnAllWithGenerationExpected = """
                                                                             // <auto-generated/>
                                                                             #nullable enable
                                                                             using System;
                                                                             using System.Collections.Generic;

                                                                             namespace TestNamespace;
                                                                             partial class NotifyPropertyChangingOnAllWithGeneration
                                                                              : System.ComponentModel.INotifyPropertyChanging
                                                                             {
                                                                                 public event System.ComponentModel.PropertyChangingEventHandler? PropertyChanging;
                                                                                 public float Field
                                                                                 {
                                                                                     get => _field;
                                                                                     set
                                                                                     {
                                                                                         if (value.Equals(_field)) return;
                                                                                         this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Field"));
                                                                                         _field = value;
                                                                                     }
                                                                                 }
                                                                             }

                                                                             """;

    private const string NotifyPropertyChangingOnAllDefaultGenerationCode = """
                                                                            using X39.SourceGenerators.Property;
                                                                            namespace TestNamespace;

                                                                            [NotifyPropertyChanging]
                                                                            public partial class NotifyPropertyChangingOnAllDefaultGeneration
                                                                            {
                                                                                private float _field;
                                                                            }
                                                                            """;

    private const string NotifyPropertyChangingOnAllDefaultGenerationExpected = """
        // <auto-generated/>
        #nullable enable
        using System;
        using System.Collections.Generic;

        namespace TestNamespace;
        partial class NotifyPropertyChangingOnAllDefaultGeneration
         : System.ComponentModel.INotifyPropertyChanging
        {
            public event System.ComponentModel.PropertyChangingEventHandler? PropertyChanging;
            public float Field
            {
                get => _field;
                set
                {
                    if (value.Equals(_field)) return;
                    this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Field"));
                    _field = value;
                }
            }
        }

        """;

    private const string NotifyPropertyChangingOnAllNoGenerationCode = """
                                                                       using X39.SourceGenerators.Property;
                                                                       namespace TestNamespace;

                                                                       [NotifyPropertyChanging(false)]
                                                                       public partial class NotifyPropertyChangingOnAllNoGeneration
                                                                       : System.ComponentModel.INotifyPropertyChanging
                                                                       {
                                                                           public event System.ComponentModel.PropertyChangingEventHandler? PropertyChanging;
                                                                           private float _field;
                                                                       }
                                                                       """;

    private const string NotifyPropertyChangingOnAllNoGenerationExpected = """
                                                                           // <auto-generated/>
                                                                           #nullable enable
                                                                           using System;
                                                                           using System.Collections.Generic;

                                                                           namespace TestNamespace;
                                                                           partial class NotifyPropertyChangingOnAllNoGeneration
                                                                           {
                                                                               public float Field
                                                                               {
                                                                                   get => _field;
                                                                                   set
                                                                                   {
                                                                                       if (value.Equals(_field)) return;
                                                                                       this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Field"));
                                                                                       _field = value;
                                                                                   }
                                                                               }
                                                                           }

                                                                           """;

    private const string NotifyPropertyChangedOnAllWithGenerationCode = """
                                                                        using X39.SourceGenerators.Property;
                                                                        namespace TestNamespace;

                                                                        [NotifyPropertyChanged(true)]
                                                                        public partial class NotifyPropertyChangedOnAllWithGeneration
                                                                        {
                                                                            private float _field;
                                                                        }
                                                                        """;

    private const string NotifyPropertyChangedOnAllWithGenerationExpected = """
                                                                            // <auto-generated/>
                                                                            #nullable enable
                                                                            using System;
                                                                            using System.Collections.Generic;

                                                                            namespace TestNamespace;
                                                                            partial class NotifyPropertyChangedOnAllWithGeneration
                                                                             : System.ComponentModel.INotifyPropertyChanged
                                                                            {
                                                                                public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
                                                                                public float Field
                                                                                {
                                                                                    get => _field;
                                                                                    set
                                                                                    {
                                                                                        if (value.Equals(_field)) return;
                                                                                        _field = value;
                                                                                        this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                                                                                    }
                                                                                }
                                                                            }

                                                                            """;

    private const string NotifyPropertyChangedOnAllDefaultGenerationCode = """
                                                                           using X39.SourceGenerators.Property;
                                                                           namespace TestNamespace;

                                                                           [NotifyPropertyChanged]
                                                                           public partial class NotifyPropertyChangedOnAllDefaultGeneration
                                                                           {
                                                                               private float _field;
                                                                           }
                                                                           """;

    private const string NotifyPropertyChangedOnAllDefaultGenerationExpected = """
                                                                               // <auto-generated/>
                                                                               #nullable enable
                                                                               using System;
                                                                               using System.Collections.Generic;

                                                                               namespace TestNamespace;
                                                                               partial class NotifyPropertyChangedOnAllDefaultGeneration
                                                                                : System.ComponentModel.INotifyPropertyChanged
                                                                               {
                                                                                   public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
                                                                                   public float Field
                                                                                   {
                                                                                       get => _field;
                                                                                       set
                                                                                       {
                                                                                           if (value.Equals(_field)) return;
                                                                                           _field = value;
                                                                                           this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                                                                                       }
                                                                                   }
                                                                               }

                                                                               """;

    private const string NotifyPropertyChangedOnAllNoGenerationCode = """
                                                                      using X39.SourceGenerators.Property;
                                                                      namespace TestNamespace;

                                                                      [NotifyPropertyChanged(false)]
                                                                      public partial class NotifyPropertyChangedOnAllNoGeneration
                                                                       : System.ComponentModel.INotifyPropertyChanged
                                                                      {
                                                                          public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
                                                                          private float _field;
                                                                      }
                                                                      """;

    private const string NotifyPropertyChangedOnAllNoGenerationExpected = """
                                                                          // <auto-generated/>
                                                                          #nullable enable
                                                                          using System;
                                                                          using System.Collections.Generic;

                                                                          namespace TestNamespace;
                                                                          partial class NotifyPropertyChangedOnAllNoGeneration
                                                                          {
                                                                              public float Field
                                                                              {
                                                                                  get => _field;
                                                                                  set
                                                                                  {
                                                                                      if (value.Equals(_field)) return;
                                                                                      _field = value;
                                                                                      this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                                                                                  }
                                                                              }
                                                                          }

                                                                          """;

    private const string NotifyPropertyChangedOnFieldCode = """
                                                            using X39.SourceGenerators.Property;
                                                            namespace TestNamespace;

                                                            public partial class NotifyPropertyChangedOnField : System.ComponentModel.INotifyPropertyChanged
                                                            {
                                                                public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
                                                                
                                                                [NotifyPropertyChanged]
                                                                private float _field;
                                                            }
                                                            """;

    private const string NotifyPropertyChangedOnFieldExpected = """
                                                                // <auto-generated/>
                                                                #nullable enable
                                                                using System;
                                                                using System.Collections.Generic;

                                                                namespace TestNamespace;
                                                                partial class NotifyPropertyChangedOnField
                                                                {
                                                                    public float Field
                                                                    {
                                                                        get => _field;
                                                                        set
                                                                        {
                                                                            if (value.Equals(_field)) return;
                                                                            _field = value;
                                                                            this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                                                                        }
                                                                    }
                                                                }

                                                                """;

    private const string NotifyPropertyChangingOnFieldCode = """
                                                             using X39.SourceGenerators.Property;
                                                             namespace TestNamespace;

                                                             public partial class NotifyPropertyChangingOnField : System.ComponentModel.INotifyPropertyChanging
                                                             {
                                                                 public event System.ComponentModel.PropertyChangingEventHandler? PropertyChanging;
                                                                 
                                                                 [NotifyPropertyChanging]
                                                                 private float _field;
                                                             }
                                                             """;

    private const string NotifyPropertyChangingOnFieldExpected = """
                                                                 // <auto-generated/>
                                                                 #nullable enable
                                                                 using System;
                                                                 using System.Collections.Generic;

                                                                 namespace TestNamespace;
                                                                 partial class NotifyPropertyChangingOnField
                                                                 {
                                                                     public float Field
                                                                     {
                                                                         get => _field;
                                                                         set
                                                                         {
                                                                             if (value.Equals(_field)) return;
                                                                             this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Field"));
                                                                             _field = value;
                                                                         }
                                                                     }
                                                                 }

                                                                 """;

    private const string PropertyNameCode = """
                                            using X39.SourceGenerators.Property;
                                            namespace TestNamespace;

                                            public partial class PropertyName
                                            {
                                                [PropertyName("SomeName")]
                                                private float _field;
                                            }
                                            """;

    private const string PropertyNameExpected = """
                                                // <auto-generated/>
                                                #nullable enable
                                                using System;
                                                using System.Collections.Generic;

                                                namespace TestNamespace;
                                                partial class PropertyName
                                                {
                                                    public float SomeName
                                                    {
                                                        get => _field;
                                                        set
                                                        {
                                                            if (value.Equals(_field)) return;
                                                            _field = value;
                                                        }
                                                    }
                                                }

                                                """;

    private const string MaxLengthValidationCode = """
                                                   using X39.SourceGenerators.Property;
                                                   using System.ComponentModel.DataAnnotations;
                                                   namespace TestNamespace;

                                                   public partial class MaxLengthValidation
                                                   {
                                                       [ValidationStrategy(EValidationStrategy.Exception), MaxLength(123)]
                                                       private string _field;
                                                   }
                                                   """;

    private const string MaxLengthValidationExpected = $$"""
                                                         // <auto-generated/>
                                                         #nullable enable
                                                         using System;
                                                         using System.Collections.Generic;

                                                         namespace TestNamespace;
                                                         partial class MaxLengthValidation
                                                         {
                                                             public string Field
                                                             {
                                                                 get => _field;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_field)) return;
                                                                     if (value.Length > 123)
                                                                         throw new System.ArgumentException("Validation of Field failed: Value must be at most 123 characters long", nameof(value));
                                                                     _field = value;
                                                                 }
                                                             }
                                                         }

                                                         """;

    private const string IntRangeValidationCode = """
                                                  using X39.SourceGenerators.Property;
                                                  using System.ComponentModel.DataAnnotations;
                                                  namespace TestNamespace;

                                                  public partial class IntRangeValidation
                                                  {
                                                      [ValidationStrategy(EValidationStrategy.Exception), Range(5, 6)]
                                                      private int _field;
                                                  }
                                                  """;

    private const string IntRangeValidationExpected = $$"""
                                                        // <auto-generated/>
                                                        #nullable enable
                                                        using System;
                                                        using System.Collections.Generic;

                                                        namespace TestNamespace;
                                                        partial class IntRangeValidation
                                                        {
                                                            public int Field
                                                            {
                                                                get => _field;
                                                                set
                                                                {
                                                                    if (value.Equals(_field)) return;
                                                                    if (value < 5 || value > 6)
                                                                        throw new System.ArgumentException("Validation of Field failed: Value must be between 5 and 6", nameof(value));
                                                                    _field = value;
                                                                }
                                                            }
                                                        }

                                                        """;

    private const string DoubleRangeValidationCode = """
                                                     using X39.SourceGenerators.Property;
                                                     using System.ComponentModel.DataAnnotations;
                                                     namespace TestNamespace;

                                                     public partial class DoubleRangeValidation
                                                     {
                                                         [ValidationStrategy(EValidationStrategy.Exception), Range(5.1, 6.1)]
                                                         private double _field;
                                                     }
                                                     """;

    private const string DoubleRangeValidationExpected = """
                                                         // <auto-generated/>
                                                         #nullable enable
                                                         using System;
                                                         using System.Collections.Generic;

                                                         namespace TestNamespace;
                                                         partial class DoubleRangeValidation
                                                         {
                                                             public double Field
                                                             {
                                                                 get => _field;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_field)) return;
                                                                     if (value < 5.1 || value > 6.1)
                                                                         throw new System.ArgumentException("Validation of Field failed: Value must be between 5.1 and 6.1", nameof(value));
                                                                     _field = value;
                                                                 }
                                                             }
                                                         }

                                                         """;

    private const string ExplicitTypeRangeValidationCode = """
                                                           using X39.SourceGenerators.Property;
                                                           using System.ComponentModel.DataAnnotations;
                                                           namespace TestNamespace;

                                                           public partial class ExplicitTypeRangeValidation
                                                           {
                                                               [ValidationStrategy(EValidationStrategy.Exception), Range(typeof(int), "5", "6")]
                                                               private int _field;
                                                           }
                                                           """;

    private const string ExplicitTypeRangeValidationExpected = """
                                                               // <auto-generated/>
                                                               #nullable enable
                                                               using System;
                                                               using System.Collections.Generic;

                                                               namespace TestNamespace;
                                                               partial class ExplicitTypeRangeValidation
                                                               {
                                                                   public int Field
                                                                   {
                                                                       get => _field;
                                                                       set
                                                                       {
                                                                           if (value.Equals(_field)) return;
                                                                           if (value.CompareTo(5) < 0 || value.CompareTo(6) > 0)
                                                                               throw new System.ArgumentException("Validation of Field failed: Value must be between 5 and 6", nameof(value));
                                                                           _field = value;
                                                                       }
                                                                   }
                                                               }

                                                               """;

    private const string EqualityCheckDefaultCode = """
                                                    using X39.SourceGenerators.Property;
                                                    using System.ComponentModel.DataAnnotations;
                                                    namespace TestNamespace;

                                                    public partial class EqualityCheckDefault
                                                    {
                                                        [EqualityCheck(EEqualityCheckMode.Default)]
                                                        private int _field;
                                                    }
                                                    """;

    private const string EqualityCheckDefaultExpected = """
                                                        // <auto-generated/>
                                                        #nullable enable
                                                        using System;
                                                        using System.Collections.Generic;

                                                        namespace TestNamespace;
                                                        partial class EqualityCheckDefault
                                                        {
                                                            public int Field
                                                            {
                                                                get => _field;
                                                                set
                                                                {
                                                                    if (value.Equals(_field)) return;
                                                                    _field = value;
                                                                }
                                                            }
                                                        }

                                                        """;

    private const string EqualityCheckCustomCode = """
                                                   using X39.SourceGenerators.Property;
                                                   using System.ComponentModel.DataAnnotations;
                                                   namespace TestNamespace;

                                                   public partial class EqualityCheckCustom
                                                   {
                                                       private static bool CustomEqualityCheck(int oldValue, int newValue) => false;
                                                       [EqualityCheck(EEqualityCheckMode.Custom, Custom: nameof(CustomEqualityCheck))]
                                                       private int _field;
                                                   }
                                                   """;

    private const string EqualityCheckCustomExpected = """
                                                       // <auto-generated/>
                                                       #nullable enable
                                                       using System;
                                                       using System.Collections.Generic;

                                                       namespace TestNamespace;
                                                       partial class EqualityCheckCustom
                                                       {
                                                           public int Field
                                                           {
                                                               get => _field;
                                                               set
                                                               {
                                                                   if (CustomEqualityCheck(_field, value)) return;
                                                                   _field = value;
                                                               }
                                                           }
                                                       }

                                                       """;

    private const string EqualityCheckNoneCode = """
                                                 using X39.SourceGenerators.Property;
                                                 using System.ComponentModel.DataAnnotations;
                                                 namespace TestNamespace;

                                                 public partial class EqualityCheckNone
                                                 {
                                                     [EqualityCheck(EEqualityCheckMode.None)]
                                                     private int _field;
                                                 }
                                                 """;

    private const string EqualityCheckNoneExpected = """
                                                     // <auto-generated/>
                                                     #nullable enable
                                                     using System;
                                                     using System.Collections.Generic;

                                                     namespace TestNamespace;
                                                     partial class EqualityCheckNone
                                                     {
                                                         public int Field
                                                         {
                                                             get => _field;
                                                             set
                                                             {
                                                                 _field = value;
                                                             }
                                                         }
                                                     }

                                                     """;

    private const string SingleGuardCode = """
                                           using X39.SourceGenerators.Property;
                                           using System.ComponentModel.DataAnnotations;
                                           namespace TestNamespace;

                                           public partial class SingleGuard
                                           {
                                               private bool GuardMethod(int oldValue, int newValue) => true;
                                               [Guard(nameof(GuardMethod))]
                                               private int _field;
                                           }
                                           """;

    private const string SingleGuardExpected = """
                                               // <auto-generated/>
                                               #nullable enable
                                               using System;
                                               using System.Collections.Generic;

                                               namespace TestNamespace;
                                               partial class SingleGuard
                                               {
                                                   public int Field
                                                   {
                                                       get => _field;
                                                       set
                                                       {
                                                           if (value.Equals(_field)) return;
                                                           if (!GuardMethod(_field, value))
                                                               throw new System.ArgumentException("Validation of Field failed: Guard method GuardMethod failed", nameof(value));
                                                           _field = value;
                                                       }
                                                   }
                                               }

                                               """;

    private const string MultipleGuardsCode = """
                                              using X39.SourceGenerators.Property;
                                              using System.ComponentModel.DataAnnotations;
                                              namespace TestNamespace;

                                              public partial class MultipleGuards
                                              {
                                                  private bool GuardMethod1(int oldValue, int newValue) => true;
                                                  private bool GuardMethod2(int oldValue, int newValue) => true;
                                                  [Guard(nameof(GuardMethod1)), Guard(nameof(GuardMethod2))]
                                                  private int _field;
                                              }
                                              """;

    private const string MultipleGuardsExpected = """
                                                  // <auto-generated/>
                                                  #nullable enable
                                                  using System;
                                                  using System.Collections.Generic;

                                                  namespace TestNamespace;
                                                  partial class MultipleGuards
                                                  {
                                                      public int Field
                                                      {
                                                          get => _field;
                                                          set
                                                          {
                                                              if (value.Equals(_field)) return;
                                                              if (!GuardMethod1(_field, value))
                                                                  throw new System.ArgumentException("Validation of Field failed: Guard method GuardMethod1 failed", nameof(value));
                                                              if (!GuardMethod2(_field, value))
                                                                  throw new System.ArgumentException("Validation of Field failed: Guard method GuardMethod2 failed", nameof(value));
                                                              _field = value;
                                                          }
                                                      }
                                                  }

                                                  """;

    private const string ValidationStrategyExceptionWithGuardCode = """
                                                                    using X39.SourceGenerators.Property;
                                                                    using System.ComponentModel.DataAnnotations;
                                                                    namespace TestNamespace;

                                                                    public partial class ValidationStrategyExceptionWithGuard
                                                                    {
                                                                        private bool GuardMethod(int oldValue, int newValue) => true;
                                                                        [ValidationStrategy(EValidationStrategy.Exception), Guard(nameof(GuardMethod))]
                                                                        private int _field;
                                                                    }
                                                                    """;

    private const string ValidationStrategyExceptionWithGuardExpected = """
                                                                        // <auto-generated/>
                                                                        #nullable enable
                                                                        using System;
                                                                        using System.Collections.Generic;

                                                                        namespace TestNamespace;
                                                                        partial class ValidationStrategyExceptionWithGuard
                                                                        {
                                                                            public int Field
                                                                            {
                                                                                get => _field;
                                                                                set
                                                                                {
                                                                                    if (value.Equals(_field)) return;
                                                                                    if (!GuardMethod(_field, value))
                                                                                        throw new System.ArgumentException("Validation of Field failed: Guard method GuardMethod failed", nameof(value));
                                                                                    _field = value;
                                                                                }
                                                                            }
                                                                        }

                                                                        """;

    private const string ValidationStrategyRollbackWithGuardAndNotifyPropertyChangedCode = """
        using X39.SourceGenerators.Property;
        using System.ComponentModel.DataAnnotations;
        namespace TestNamespace;

        public partial class ValidationStrategyRollbackWithGuardAndNotifyPropertyChanged : System.ComponentModel.INotifyPropertyChanged
        {
            public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
            
            private bool GuardMethod(int oldValue, int newValue) => true;
            [ValidationStrategy(EValidationStrategy.Rollback), Guard(nameof(GuardMethod)), NotifyPropertyChanged]
            private int _field;
        }
        """;

    private const string ValidationStrategyRollbackWithGuardAndNotifyPropertyChangedExpected = """
        // <auto-generated/>
        #nullable enable
        using System;
        using System.Collections.Generic;

        namespace TestNamespace;
        partial class ValidationStrategyRollbackWithGuardAndNotifyPropertyChanged
        {
            public int Field
            {
                get => _field;
                set
                {
                    if (value.Equals(_field)) return;
                    if (!GuardMethod(_field, value))
                    {
                        this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                        return;
                    }
                    _field = value;
                    this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                }
            }
        }

        """;

    private const string ValidationStrategyIgnoreWithGuardAndNotifyPropertyChangedCode = """
        using X39.SourceGenerators.Property;
        using System.ComponentModel.DataAnnotations;
        namespace TestNamespace;

        public partial class ValidationStrategyIgnoreWithGuardAndNotifyPropertyChanged : System.ComponentModel.INotifyPropertyChanged
        {
            public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
            
            private bool GuardMethod(int oldValue, int newValue) => true;
            [ValidationStrategy(EValidationStrategy.Ignore), Guard(nameof(GuardMethod)), NotifyPropertyChanged]
            private int _field;
        }
        """;

    private const string ValidationStrategyIgnoreWithGuardAndNotifyPropertyChangedExpected = """
        // <auto-generated/>
        #nullable enable
        using System;
        using System.Collections.Generic;

        namespace TestNamespace;
        partial class ValidationStrategyIgnoreWithGuardAndNotifyPropertyChanged
        {
            public int Field
            {
                get => _field;
                set
                {
                    if (value.Equals(_field)) return;
                    if (!GuardMethod(_field, value))
                        return;
                    _field = value;
                    this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                }
            }
        }

        """;

    public const string ValidationStrategyExceptionWithGuardAndNotifyPropertyChangedCode = """
        using X39.SourceGenerators.Property;
        using System.ComponentModel.DataAnnotations;
        namespace TestNamespace;

        public partial class ValidationStrategyExceptionWithGuardAndNotifyPropertyChanged : System.ComponentModel.INotifyPropertyChanged
        {
            public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
            
            private bool GuardMethod(int oldValue, int newValue) => true;
            [ValidationStrategy(EValidationStrategy.Exception), Guard(nameof(GuardMethod)), NotifyPropertyChanged]
            private int _field;
        }
        """;

    public const string ValidationStrategyExceptionWithGuardAndNotifyPropertyChangedExpected = """
        // <auto-generated/>
        #nullable enable
        using System;
        using System.Collections.Generic;

        namespace TestNamespace;
        partial class ValidationStrategyExceptionWithGuardAndNotifyPropertyChanged
        {
            public int Field
            {
                get => _field;
                set
                {
                    if (value.Equals(_field)) return;
                    if (!GuardMethod(_field, value))
                        return;
                    _field = value;
                    this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Field"));
                }
            }
        }

        """;

    private const string PropertyEncapsulationCode = """
                                                     using X39.SourceGenerators.Property;
                                                     using System.ComponentModel.DataAnnotations;
                                                     namespace TestNamespace;

                                                     public partial class PropertyEncapsulation
                                                     {
                                                         [PropertyEncapsulation(EPropertyEncapsulation.Public)]
                                                         private int _publicField;
                                                         
                                                         [PropertyEncapsulation(EPropertyEncapsulation.Protected)]
                                                         private int _protectedField;
                                                         
                                                         [PropertyEncapsulation(EPropertyEncapsulation.Private)]
                                                         private int _privateField;
                                                         
                                                         [PropertyEncapsulation(EPropertyEncapsulation.Internal)]
                                                         private int _internalField;
                                                         
                                                         [PropertyEncapsulation(EPropertyEncapsulation.ProtectedInternal)]
                                                         private int _protectedInternalField;
                                                     }
                                                     """;

    private const string PropertyEncapsulationExpected = """
                                                         // <auto-generated/>
                                                         #nullable enable
                                                         using System;
                                                         using System.Collections.Generic;

                                                         namespace TestNamespace;
                                                         partial class PropertyEncapsulation
                                                         {
                                                             public int Public
                                                             {
                                                                 get => _publicField;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_publicField)) return;
                                                                     _publicField = value;
                                                                 }
                                                             }
                                                             protected int Protected
                                                             {
                                                                 get => _protectedField;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_protectedField)) return;
                                                                     _protectedField = value;
                                                                 }
                                                             }
                                                             private int Private
                                                             {
                                                                 get => _privateField;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_privateField)) return;
                                                                     _privateField = value;
                                                                 }
                                                             }
                                                             internal int Internal
                                                             {
                                                                 get => _internalField;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_internalField)) return;
                                                                     _internalField = value;
                                                                 }
                                                             }
                                                             protected internal int ProtectedInternal
                                                             {
                                                                 get => _protectedInternalField;
                                                                 set
                                                                 {
                                                                     if (value.Equals(_protectedInternalField)) return;
                                                                     _protectedInternalField = value;
                                                                 }
                                                             }
                                                         }

                                                         """;

    [Theory]
    [InlineData(
        "NotifyPropertyChangedOnAllDefaultGeneration",
        NotifyPropertyChangedOnAllDefaultGenerationCode,
        NotifyPropertyChangedOnAllDefaultGenerationExpected
    )]
    [InlineData(
        "NotifyPropertyChangedOnAllWithGeneration",
        NotifyPropertyChangedOnAllWithGenerationCode,
        NotifyPropertyChangedOnAllWithGenerationExpected
    )]
    [InlineData(
        "NotifyPropertyChangedOnAllNoGeneration",
        NotifyPropertyChangedOnAllNoGenerationCode,
        NotifyPropertyChangedOnAllNoGenerationExpected
    )]
    [InlineData("NotifyPropertyChangedOnField", NotifyPropertyChangedOnFieldCode, NotifyPropertyChangedOnFieldExpected)]
    [InlineData(
        "NotifyPropertyChangingOnAllDefaultGeneration",
        NotifyPropertyChangingOnAllDefaultGenerationCode,
        NotifyPropertyChangingOnAllDefaultGenerationExpected
    )]
    [InlineData(
        "NotifyPropertyChangingOnAllWithGeneration",
        NotifyPropertyChangingOnAllWithGenerationCode,
        NotifyPropertyChangingOnAllWithGenerationExpected
    )]
    [InlineData(
        "NotifyPropertyChangingOnAllNoGeneration",
        NotifyPropertyChangingOnAllNoGenerationCode,
        NotifyPropertyChangingOnAllNoGenerationExpected
    )]
    [InlineData(
        "NotifyPropertyChangingOnField",
        NotifyPropertyChangingOnFieldCode,
        NotifyPropertyChangingOnFieldExpected
    )]
    [InlineData("PropertyName",                PropertyNameCode,                PropertyNameExpected)]
    [InlineData("MaxLengthValidation",         MaxLengthValidationCode,         MaxLengthValidationExpected)]
    [InlineData("IntRangeValidation",          IntRangeValidationCode,          IntRangeValidationExpected)]
    [InlineData("DoubleRangeValidation",       DoubleRangeValidationCode,       DoubleRangeValidationExpected)]
    [InlineData("ExplicitTypeRangeValidation", ExplicitTypeRangeValidationCode, ExplicitTypeRangeValidationExpected)]
    [InlineData("EqualityCheckDefault",        EqualityCheckDefaultCode,        EqualityCheckDefaultExpected)]
    [InlineData("EqualityCheckCustom",         EqualityCheckCustomCode,         EqualityCheckCustomExpected)]
    [InlineData("EqualityCheckNone",           EqualityCheckNoneCode,           EqualityCheckNoneExpected)]
    [InlineData("SingleGuard",                 SingleGuardCode,                 SingleGuardExpected)]
    [InlineData("MultipleGuards",              MultipleGuardsCode,              MultipleGuardsExpected)]
    [InlineData("PropertyEncapsulation",       PropertyEncapsulationCode,       PropertyEncapsulationExpected)]
    [InlineData(
        "ValidationStrategyExceptionWithGuard",
        ValidationStrategyExceptionWithGuardCode,
        ValidationStrategyExceptionWithGuardExpected
    )]
    [InlineData(
        "ValidationStrategyRollbackWithGuardAndNotifyPropertyChanged",
        ValidationStrategyRollbackWithGuardAndNotifyPropertyChangedCode,
        ValidationStrategyRollbackWithGuardAndNotifyPropertyChangedExpected
    )]
    [InlineData(
        "ValidationStrategyIgnoreWithGuardAndNotifyPropertyChanged",
        ValidationStrategyIgnoreWithGuardAndNotifyPropertyChangedCode,
        ValidationStrategyIgnoreWithGuardAndNotifyPropertyChangedExpected
    )]
    public void GenerateReportMethod(string className, string code, string expected)
    {
        // Create an instance of the source generator.
        var generator = new PropertyIncrementalSourceGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var assemblies = AppDomain.CurrentDomain.GetAssemblies()
                                  .Where(a => !a.IsDynamic && !string.IsNullOrWhiteSpace(a.Location))
                                  .OrderBy((q) => q.Location)
                                  .ToArray();
        var assemblyDir = Path.GetDirectoryName(assemblies.Single(q => q.Location.EndsWith("netstandard.dll")).Location)
                          ?? throw new InvalidOperationException(
                              "Could not find the directory of the netstandard.dll assembly."
                          );
        var compilation = CSharpCompilation.Create(
            nameof(PropertyIncrementalSourceGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(code) },
            assemblies.Select(assembly => assembly.Location)
                      .Append(Path.Combine(assemblyDir, "System.ComponentModel.Annotations.dll"))
                      .Select(path => MetadataReference.CreateFromFile(path))
                      .ToArray(),
            new CSharpCompilationOptions(
                outputKind: OutputKind.DynamicallyLinkedLibrary,
                reportSuppressedDiagnostics: true,
                optimizationLevel: OptimizationLevel.Debug
            )
        );
        // Run generators and retrieve all results.
        var runResult = driver.RunGeneratorsAndUpdateCompilation(compilation, out var newCompilation, out var _)
                              .GetRunResult();

        // Verify that the compilation has no errors.
        var diagnostics = newCompilation.GetDiagnostics();
        Assert.Empty(diagnostics.Where(d => d.Severity == DiagnosticSeverity.Error));

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFiles = runResult.GeneratedTrees.Where(t => t.FilePath.EndsWith(".g.cs"))
                                      .Select((q) => (q.FilePath, Code: q.GetText().ToString()))
                                      .ToArray();


        // Complex generators should be tested using text comparison.
        var attributesOutput = generatedFiles
                               .Single(f => f.FilePath.EndsWith("X39.SourceGenerators.Property.g.cs"))
                               .Code;
        Assert.Equal(AttributesGenerated, attributesOutput, ignoreLineEndingDifferences: true);
        var classOutput = generatedFiles.Single(f => f.FilePath.EndsWith(string.Concat(className, ".g.cs"))).Code;
        Assert.Equal(expected, classOutput, ignoreLineEndingDifferences: true);
    }

    private const string AttributesGenerated = """
                                               // <auto-generated/>
                                               #nullable enable
                                               using System;
                                               using System.Runtime.CompilerServices;
                                               
                                               namespace X39.SourceGenerators.Property
                                               {
                                                   /// <summary>
                                                   /// Makes the field or class, annotated with the 'NotifyPropertyChanged' attribute, create
                                                   /// properties which raise the PropertyChanged event when changed.
                                                   /// For a decorated class, all fields will be considered for property generation and the
                                                   /// PropertyChanged event will be implemented too.
                                                   /// </summary>
                                                   /// <remarks>
                                                   /// The name of the property generated will be the Capitalized name of the field, minus any leading underscores.
                                                   /// If the field is annotated with the 'PropertyName' attribute,
                                                   /// the name of the property will be the value of the 'PropertyName' attribute.
                                                   /// </remarks>
                                                   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                  [CompilerGenerated]
                                                  public class NotifyPropertyChangedAttribute : Attribute
                                                  {
                                                      public bool GenerateEvent { get; }
                                               
                                                      /// <summary>
                                                      /// Makes the field or class, annotated with the 'NotifyPropertyChanged' attribute, create
                                                      /// properties which raise the PropertyChanged event when changed.
                                                      /// For a decorated class, all fields will be considered for property generation and the
                                                      /// PropertyChanged event will be implemented too.
                                                      /// </summary>
                                                      /// <remarks>
                                                      /// The name of the property generated will be the Capitalized name of the field, minus any leading underscores.
                                                      /// If the field is annotated with the 'PropertyName' attribute,
                                                      /// the name of the property will be the value of the 'PropertyName' attribute.
                                                      /// </remarks>
                                                      /// <param name="generateEvent">
                                                      ///     If true, the PropertyChanged event will be generated (as in: Added to the generated class).
                                                      ///     If false, the PropertyChanged event will not be generated and must be supplied by the user.
                                                      /// </param>
                                                      public NotifyPropertyChangedAttribute(bool generateEvent = true) { GenerateEvent = generateEvent; }
                                                  }
                                               
                                                   /// <summary>
                                                   /// Makes the field or class, annotated with the 'NotifyPropertyChanging' attribute, create
                                                   /// properties which raise the PropertyChanging event when changed.
                                                   /// For a decorated class, all fields will be considered for property generation and the
                                                   /// PropertyChanging event will be implemented too.
                                                   /// </summary>
                                                   /// <remarks>
                                                   /// The name of the property generated will be the Capitalized name of the field, minus any leading underscores.
                                                   /// If the field is annotated with the 'PropertyName' attribute,
                                                   /// the name of the property will be the value of the 'PropertyName' attribute.
                                                   /// </remarks>
                                                   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                  [CompilerGenerated]
                                                  public class NotifyPropertyChangingAttribute : Attribute
                                                  {
                                                      public bool GenerateEvent { get; }
                                               
                                                      /// <summary>
                                                      /// Makes the field or class, annotated with the 'NotifyPropertyChanging' attribute, create
                                                      /// properties which raise the PropertyChanging event when changed.
                                                      /// For a decorated class, all fields will be considered for property generation and the
                                                      /// PropertyChanging event will be implemented too.
                                                      /// </summary>
                                                      /// <remarks>
                                                      /// The name of the property generated will be the Capitalized name of the field, minus any leading underscores.
                                                      /// If the field is annotated with the 'PropertyName' attribute,
                                                      /// the name of the property will be the value of the 'PropertyName' attribute.
                                                      /// </remarks>
                                                      /// <param name="generateEvent">
                                                      ///     If true, the PropertyChanging event will be generated (as in: Added to the generated class).
                                                      ///     If false, the PropertyChanging event will not be generated and must be supplied by the user.
                                                      /// </param>
                                                      public NotifyPropertyChangingAttribute(bool generateEvent = true) { GenerateEvent = generateEvent; }
                                                  }
                                               
                                               
                                                  /// <summary>
                                                  /// Enum containing the possible validation strategies for the <see cref="ValidationStrategyAttribute"/>.
                                                  /// </summary>
                                                  [CompilerGenerated]
                                                  public enum EValidationStrategy
                                                  {
                                                      /// <summary>
                                                      /// Throw an exception when the validation fails.
                                                      /// </summary>
                                                      /// <remarks>
                                                      /// This is the default behavior.
                                                      /// </remarks>
                                                      Exception,
                                               
                                                      /// <summary>
                                                      /// Rollback the changes when the validation fails.
                                                      /// </summary>
                                                      /// <remarks>
                                                      /// Unless another property (eg. NotifyPropertyChanged) is also added,
                                                      /// this mode behaves like the <see cref="Ignore"/> mode.
                                                      /// If such a property is present, the corresponding side effects will be taken into account
                                                      /// (eg. PropertyChanged event will be raised to notify the UI about the change in the value, albeit the
                                                      /// value not having been changed in the underlying data store).
                                                      /// </remarks>
                                                      Rollback,
                                               
                                                      /// <summary>
                                                      /// Ignore the changes when the validation fails.
                                                      /// </summary>
                                                      /// <remarks>
                                                      /// If changes are ignored, the code will exit immediately without any further action (without side effects).
                                                      /// </remarks>
                                                      Ignore,
                                                  }
                                               
                                                  /// <summary>
                                                  /// Makes the field or class, annotated with the 'ValidationStrategy' attribute, create
                                                  /// Properties which, for a given validation, will behave according to the specified strategy.
                                                  /// </summary>
                                                  /// <seealso cref="System.ComponentModel.DataAnnotations.MaxLengthAttribute"/>
                                                  /// <seealso cref="System.ComponentModel.DataAnnotations.RangeAttribute"/>
                                                  [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                  [CompilerGenerated]
                                                  public class ValidationStrategyAttribute : Attribute
                                                  {
                                                      public EValidationStrategy Strategy { get; }
                                               
                                                      /// <summary>
                                                      /// Makes the field or class, annotated with the 'ValidationStrategy' attribute, create
                                                      /// Properties which, for a given validation, will behave according to the specified strategy.
                                                      /// </summary>
                                                      /// <seealso cref="System.ComponentModel.DataAnnotations.MaxLengthAttribute"/>
                                                      /// <seealso cref="System.ComponentModel.DataAnnotations.RangeAttribute"/>
                                                      public ValidationStrategyAttribute(EValidationStrategy strategy = EValidationStrategy.Exception)
                                                      {
                                                          Strategy = strategy;
                                                      }
                                                  }
                                               
                                                  /// <summary>
                                                  /// Makes the field annotated with the 'PropertyName' attribute, create a property with the specified name.
                                                  /// </summary>
                                                  [AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                  [CompilerGenerated]
                                                  public class PropertyNameAttribute : Attribute
                                                  {
                                                      public string Name { get; }
                                               
                                                      /// <summary>
                                                      /// Makes the field annotated with the 'PropertyName' attribute, create a property with the specified name.
                                                      /// </summary>
                                                      public PropertyNameAttribute(string name) { Name = name; }
                                                  }
                                               
                                                  /// <summary>
                                                  /// Enum containing the possible property encapsulation strategies for the <see cref="PropertyEncapsulationAttribute"/>.
                                                  /// </summary>
                                                  [CompilerGenerated]
                                                  public enum EPropertyEncapsulation
                                                  {
                                                      /// <summary>
                                                      /// The property will be public and accessible from anywhere.
                                                      /// </summary>
                                                      Public,
                                               
                                                      /// <summary>
                                                      /// The property will be protected and accessible from the containing class and its derived classes.
                                                      /// </summary>
                                                      Protected,
                                               
                                                      /// <summary>
                                                      /// The property will be private and accessible only from the containing class.
                                                      /// </summary>
                                                      Private,
                                               
                                                      /// <summary>
                                                      /// The property will be internal and accessible only from the containing assembly.
                                                      /// </summary>
                                                      Internal,
                                               
                                                      /// <summary>
                                                      /// The property will be protected internal and accessible from the containing class or the derived
                                                      /// classes living in the same assembly.
                                                      /// </summary>
                                                      ProtectedInternal,
                                                  }
                                               
                                                  /// <summary>
                                                  /// Allows to configure either the default property encapsulation (when applied to a class)
                                                  /// or the property encapsulation for a specific field.
                                                  /// </summary>
                                                  [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                  [CompilerGenerated]
                                                  public class PropertyEncapsulationAttribute : Attribute
                                                  {
                                                      public EPropertyEncapsulation Encapsulation { get; }
                                               
                                                      /// <summary>
                                                      /// Allows to configure either the default property encapsulation (when applied to a class)
                                                      /// or the property encapsulation for a specific field.
                                                      /// </summary>
                                                      public PropertyEncapsulationAttribute(EPropertyEncapsulation encapsulation = EPropertyEncapsulation.Public)
                                                      {
                                                          Encapsulation = encapsulation;
                                                      }
                                                  }
                                               
                                                  /// <summary>
                                                  /// When applied to a field, it will make the property generated virtual, allowing to override it in derived classes.
                                                  /// </summary>
                                                  [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                  [CompilerGenerated]
                                                  public class VirtualPropertyAttribute : Attribute { }
                                               
                                                  /// <summary>
                                                  /// Allows changing the equality check for a property or disabling it entirely.
                                                  /// </summary>
                                                  [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
                                                  [CompilerGenerated]
                                                  public class EqualityCheckAttribute : Attribute
                                                  {
                                                      public EEqualityCheckMode Mode          { get; }
                                                      public float              FloatEpsilon  { get; }
                                                      public double             DoubleEpsilon { get; }
                                                      public string?            Custom        { get; }
                                               
                                                      /// <summary>
                                                      /// Allows changing the equality check for a property or disabling it entirely.
                                                      /// </summary>
                                                      public EqualityCheckAttribute(EEqualityCheckMode mode          = EEqualityCheckMode.Default,
                                                          float                                        FloatEpsilon  = Single.Epsilon,
                                                          double                                       DoubleEpsilon = Double.Epsilon,
                                                          string?                                      Custom        = null)
                                                      {
                                                          Mode               = mode;
                                                          this.FloatEpsilon  = FloatEpsilon;
                                                          this.DoubleEpsilon = DoubleEpsilon;
                                                          this.Custom        = Custom;
                                                      }
                                                  }
                                               
                                               
                                                  /// <summary>
                                                  /// Enum containing the possible equality check modes for the <see cref="EqualityCheckAttribute"/>.
                                                  /// </summary>
                                                  [CompilerGenerated]
                                                  public enum EEqualityCheckMode
                                                  {
                                                      /// <summary>
                                                      /// The default behavior, using `Equals` for reference types,
                                                      /// `==` for value types and epsilon comparison for floating point types.
                                                      /// </summary>
                                                      /// <seealso cref="System.Single.Epsilon"/>
                                                      /// <seealso cref="System.Double.Epsilon"/>
                                                      Default,
                                               
                                                      /// <summary>
                                                      /// The property will be checked for equality using the provided custom comparison.
                                                      /// Here, `value` will be the new value and the field name will be the old value.
                                                      /// All class members may be accessed from within the custom comparison.
                                                      /// </summary>
                                                      /// <seealso cref="GuardAttribute"/>
                                                      Custom,
                                               
                                                      /// <summary>
                                                      /// The property will not be checked for equality.
                                                      /// </summary>
                                                      /// <remarks>
                                                      /// Neither the <see cref="ValidateAttribute"/> nor the <see cref="GuardAttribute"/> depend on this setting.
                                                      /// </remarks>
                                                      None,
                                                  }
                                               
                                                  /// <summary>
                                                  /// Allows to guard a property from being changed, failing the validation if the guard method does not return true.
                                                  /// </summary>
                                                  /// <remarks>
                                                  /// The guard method will be looked up in the class containing the property unless the
                                                  /// <see cref="className"/> parameter is set.
                                                  /// The method must be accessible from the containing class, must return a <see cref="bool"/>
                                                  /// and must accept two parameters.
                                                  /// Sample method signature: `bool GuardMethodName(T oldValue, T newValue)`.
                                                  /// </remarks>
                                                  [AttributeUsage(AttributeTargets.Field, AllowMultiple = true, Inherited = false)]
                                                  [CompilerGenerated]
                                                  public class GuardAttribute : Attribute
                                                  {
                                                      public string MethodName { get; }
                                               
                                                      /// <summary>
                                                      /// Allows to guard a property from being changed, failing the validation if the guard method does not return true.
                                                      /// </summary>
                                                      /// <remarks>
                                                      /// The guard method will be looked up in the class containing the property unless the
                                                      /// <see cref="className"/> parameter is set.
                                                      /// The method must be accessible from the containing class, must return a <see cref="bool"/>
                                                      /// and must accept two parameters.
                                                      /// Sample method signature: `bool GuardMethodName(T oldValue, T newValue)`.
                                                      /// </remarks>
                                                      public GuardAttribute(string methodName, string? className = null) { MethodName = methodName; }
                                                  }
                                               }
                                               """;
}
