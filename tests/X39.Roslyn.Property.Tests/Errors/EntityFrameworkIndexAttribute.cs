using System;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using X39.Roslyn.Property.Generator;
using Xunit;

namespace X39.Roslyn.Property.Tests.Errors;

public class EntityFrameworkIndexAttribute
{
    private static readonly string[] AcceptedErrors = [];
    private const           string   Class          = "Exam";
    private const string Code = """
                                      #nullable enable
                                      using System;
                                      using System.Collections.Generic;
                                      using System.ComponentModel.DataAnnotations;
                                      using System.ComponentModel.DataAnnotations.Schema;
                                      using JetBrains.Annotations;
                                      using Microsoft.EntityFrameworkCore;
                                      using NodaTime;
                                      using X39.Roslyn.Property;
                                      namespace TestNamespace;
                                      
                                      public class Organization{}
                                      public class ExamTopic{}
                                      
                                      [NotifyPropertyChanged, NotifyPropertyChanging]
                                      [Index(nameof(Identifier), IsUnique = true)]
                                      public sealed partial class Exam
                                      {
                                          [Key]
                                          private long _id;
                                      
                                          private string                  _title      = string.Empty;
                                          private Guid                    _identifier = Guid.Empty;
                                          private string                  _preamble   = string.Empty;
                                          private ICollection<ExamTopic>? _examTopics;
                                          private Instant                 _createdAt;
                                      
                                          [ForeignKey(nameof(OrganizationId))]
                                          private Organization? _organization;
                                      
                                          private long _organizationId;
                                      }
                                      
                                      """;

    private const string Expected = """
                                          // <auto-generated/>
                                          #nullable enable
                                          using System;
                                          using System.Collections.Generic;
                                          using System.ComponentModel.DataAnnotations;
                                          using System.ComponentModel.DataAnnotations.Schema;
                                          using JetBrains.Annotations;
                                          using Microsoft.EntityFrameworkCore;
                                          using NodaTime;
                                          using X39.Roslyn.Property;
                                          
                                          namespace TestNamespace;
                                          partial class Exam
                                           : System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging
                                          {
                                              public event System.ComponentModel.PropertyChangingEventHandler? PropertyChanging;
                                              public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
                                              [System.ComponentModel.DataAnnotations.KeyAttribute]
                                              public long Id
                                              {
                                                  get => _id;
                                                  set
                                                  {
                                                      if (value.Equals(_id)) return;
                                                      this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Id"));
                                                      _id = value;
                                                      this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Id"));
                                                  }
                                              }
                                              public string Title
                                              {
                                                  get => _title;
                                                  set
                                                  {
                                                      if (value.Equals(_title)) return;
                                                      this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Title"));
                                                      _title = value;
                                                      this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Title"));
                                                  }
                                              }
                                              public System.Guid Identifier
                                              {
                                                  get => _identifier;
                                                  set
                                                  {
                                                      if (value.Equals(_identifier)) return;
                                                      this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Identifier"));
                                                      _identifier = value;
                                                      this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Identifier"));
                                                  }
                                              }
                                              public string Preamble
                                              {
                                                  get => _preamble;
                                                  set
                                                  {
                                                      if (value.Equals(_preamble)) return;
                                                      this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Preamble"));
                                                      _preamble = value;
                                                      this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Preamble"));
                                                  }
                                              }
                                              public System.Collections.Generic.ICollection<TestNamespace.ExamTopic>? ExamTopics
                                              {
                                                  get => _examTopics;
                                                  set
                                                  {
                                                      if (value is null && _examTopics is null || (value?.Equals(_examTopics) ?? false)) return;
                                                      this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("ExamTopics"));
                                                      _examTopics = value;
                                                      this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("ExamTopics"));
                                                  }
                                              }
                                              public NodaTime.Instant CreatedAt
                                              {
                                                  get => _createdAt;
                                                  set
                                                  {
                                                      if (value.Equals(_createdAt)) return;
                                                      this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("CreatedAt"));
                                                      _createdAt = value;
                                                      this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("CreatedAt"));
                                                  }
                                              }
                                              [System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute("OrganizationId")]
                                              public TestNamespace.Organization? Organization
                                              {
                                                  get => _organization;
                                                  set
                                                  {
                                                      if (value is null && _organization is null || (value?.Equals(_organization) ?? false)) return;
                                                      this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("Organization"));
                                                      _organization = value;
                                                      this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("Organization"));
                                                  }
                                              }
                                              public long OrganizationId
                                              {
                                                  get => _organizationId;
                                                  set
                                                  {
                                                      if (value.Equals(_organizationId)) return;
                                                      this.PropertyChanging?.Invoke(this, new System.ComponentModel.PropertyChangingEventArgs("OrganizationId"));
                                                      _organizationId = value;
                                                      this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("OrganizationId"));
                                                  }
                                              }
                                          }
                                          
                                          """;

    [Fact]
    public void TestGeneratedClass()
    {
        // Create an instance of the source generator.
        var generator = new PropertyIncrementalSourceGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var assemblies = AppDomain
            .CurrentDomain.GetAssemblies()
            .Where(a => !a.IsDynamic && !string.IsNullOrWhiteSpace(a.Location))
            .OrderBy((q) => q.Location)
            .ToArray();
        var assemblyDir = Path.GetDirectoryName(assemblies.Single(q => q.Location.EndsWith("netstandard.dll")).Location)
                          ?? throw new InvalidOperationException(
                              "Could not find the directory of the netstandard.dll assembly."
                          );
        var selfDir = Path.GetDirectoryName(
            assemblies.Single(q => q.Location.EndsWith("X39.Roslyn.Property.Tests.dll")).Location
        );
        Assert.NotNull(selfDir);
        var compilation = CSharpCompilation.Create(
            nameof(PropertyIncrementalSourceGeneratorTests),
            [CSharpSyntaxTree.ParseText(Code)],
            assemblies
                .Select(assembly => assembly.Location)
                .Append(Path.Combine(selfDir, "X39.Roslyn.Property.dll"))
                .Append(Path.Combine(assemblyDir, "System.ComponentModel.Annotations.dll"))
                .Append(typeof(Microsoft.EntityFrameworkCore.IndexAttribute).Assembly.Location)
                .Append(typeof(NodaTime.AmbiguousTimeException).Assembly.Location)
                .Select(path => MetadataReference.CreateFromFile(path))
                .Distinct()
                .ToArray(),
            new CSharpCompilationOptions(
                outputKind: OutputKind.DynamicallyLinkedLibrary,
                reportSuppressedDiagnostics: true,
                optimizationLevel: OptimizationLevel.Debug
            )
        );
        // Run generators and retrieve all results.
        var runResult = driver
            .RunGeneratorsAndUpdateCompilation(compilation, out var newCompilation, out var _)
            .GetRunResult();

        // Verify that the compilation has no errors.
        var diagnostics = newCompilation.GetDiagnostics();
        Assert.Empty(diagnostics.Where(d => d.Severity == DiagnosticSeverity.Error && !AcceptedErrors.Contains(d.Id)));

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFiles = runResult
            .GeneratedTrees.Where(t => t.FilePath.EndsWith(".g.cs"))
            .Select((q) => (q.FilePath, Code: q.GetText().ToString()))
            .ToArray();


        // Complex generators should be tested using text comparison.
        var (_, classOutput) = Assert.Single(
            generatedFiles,
            f => f.FilePath.EndsWith(string.Concat(Class, ".g.cs"))
        );
        Assert.Equal(Expected, classOutput, ignoreLineEndingDifferences: true);
    }
}